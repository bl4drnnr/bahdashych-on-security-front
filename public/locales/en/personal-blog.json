{
  "title": "Personal blog",
  "brief": "How is constructed what you are reading now",
  "description": "The React + Next.js Typescript personal blog and portfolio page web application. The place where I share my thoughts and knowledge.",
  "searchTags": ["blog", "typescript", "nextjs"],
  "briefDescription": "You may be wondering how this blog was created from the programming side, so I wanted to give you a brief overview of the tools and technologies I used.",
  "license": "MIT license",
  "techStack": [
    { "src": "javascript", "width": 126, "height": 28 },
    { "src": "typescript", "width": 126, "height": 28 },
    { "src": "react", "width": 85, "height": 28 },
    { "src": "next.js", "width": 85, "height": 28 },
    { "src": "digitalOcean", "width": 130, "height": 28 },
    { "src": "amazon-aws", "width": 74, "height": 28 },
    { "src": "nginx", "width": 88, "height": 28 }
  ],
  "projectPages": [
    {
      "link": "https://blog.mikhailbahdashych.me",
      "text": "blog.mikhailbahdashych.me"
    },
    {
      "link": "https://github.com/bl4drnnr/personal-blog",
      "text": "github.com/bl4drnnr/personal-blog"
    }
  ],
  "toc": {
    "Structure and implementation": {
      "multiLang": "Multi-languages",
      "lightDarkThemes": "Light/Dark Themes",
      "pageRendering": "Page rendering"
    },
    "secIssues": "Security issues"
  },
  "content": [
    {
      "type": "title",
      "content": "Structure and implementation"
    },
    "I think, that the first thing you need to know about the blog is that is the simplest static application. Even though there is no any API or back-end, from which posts would be fetched, you won't see structure page per post. Actually, pages are actually rendered, but from JSON, and it'll be described later.",
    {
      "type": "subtitle",
      "content": "Multi-languages"
    },
    "First of all, blog has been written using 3 languages (not programming ones, lol) - Polish, English and Russian. This has been implemented using <span class='code-block'>i18n</span> library (quite obvious, isn't it).",
    "In the root folder of the project you will find simple config file called <span class='code-block'>next-i18next.config.js</span> that contains available languages and default languages:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "module.exports = {\n\ti18n: {\n\t\tdefaultLocale: 'en',\n\t\tlocales: ['en', 'pl', 'ru'],\n  },\n \treact: { useSuspense: false }\n};"
    },
    "In <span class='code-block'>lib</span> folder, you will find a couple of function that are responsible for the whole translation process. They will be discussed right now, but there is one more thing to mention.",
    "In <span class='code-block'>locales</span> folder, you will find a couple of other folders. Looking at their names it is quite understood what they are responsible for. Every folder has the same named JSON files (even the same structure) that contain all text you see in the blog translated on 3 languages. So now you know where everything is stored, and we can get back to lib folder.",
    "The first one is <span class='code-block'>language detector</span> contains this (<span class='code-block'>i18conifg</span> is an alias for <span class='code-block'>next-i18next.config.js</span>):",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import languageDetector from 'next-language-detector';\n\nimport i18nextConfig from '@i18config';\n\nexport default languageDetector({\n\tsupportedLngs: i18nextConfig.i18n.locales,\n\tfallbackLng: i18nextConfig.i18n.defaultLocale\n});"
    },
    "The above code is just a helper for <span class='code-block'>redirect page</span>. It's just an empty page that is used to check the current language:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { useRouter } from 'next/router';\n\nimport languageDetector from './languageDetector';\n\nconst useRedirect = (to: any) => {\n\tconst router = useRouter();\n\tto = to || router.asPath;\n\n\tReact.useEffect(() => {\n\t\tconst detectedLng = languageDetector.detect();\n\t\tif (to.startsWith('/' + detectedLng) && router.route === '/404') {\n\t\t\trouter.replace('/' + detectedLng + router.route);\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tlanguageDetector.cache(detectedLng);\n\t\trouter.replace('/' + detectedLng + to);\n\t});\n\n\treturn <></>;\n};\n\nexport const Redirect = () => {\n\t// @ts-ignore\n\tuseRedirect();\n\treturn <></>;\n};"
    },
    "Probably you have seen, that the route of the blog always looks like that: <span class='code-block'>blog.mikhailbahdashych.com/en</span>. It always starts with the picked language. You will understand why it happens just by taking a look at <span class='code-block'>pages</span> folder.",
    {
      "type": "picture",
      "width": "w30",
      "resource": "readme2.png"
    },
    "Content of every page outside of <span class='code-block'>[locale]</span> route was replaced by:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { Redirect } from '@lib/redirect';\n\nexport default Redirect;"
    },
    "Therefore, every time you are trying to go to wrong route you are either redirected to 404 or main route. Also, in <span class='code-block'>_app.tsx</span> file, to turn on <span class='code-block'>i18n</span> application is exported with <span class='code-block'>appWithTranslation</span> wrapper:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "export default appWithTranslation(App);"
    },
    "Last, but not least is <span class='code-block'>getStatic</span> file which is responsible for pages props and getting locale.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { serverSideTranslations } from 'next-i18next/serverSideTranslations';\n\nimport i18nextConfig from '@i18config';\n\nexport const getI18nPaths = () =>\n\ti18nextConfig.i18n.locales.map((lang) => ({\n\t\tparams: {\n\t\t\tlocale: lang\n\t\t}\n\t}));\n\nexport const getStaticPaths = () => ({\n\tfallback: false,\n\tpaths: getI18nPaths()\n});\n\nexport async function getI18nProps(ctx: any, ns = ['pages', 'components', 'errors', 'articles']) {\n\tconst locale = await ctx?.params?.locale;\n\tconst postName = await ctx?.params?.postName || null;\n\tconst projectName = await ctx?.params?.projectName || null;\n\n\treturn {\n\t\t...(await serverSideTranslations(locale, ns)),\n\t\tlocale,\n\t\tpostName,\n\t\tprojectName\n\t};\n}\n\n\nexport function makeStaticProps(ns: string[]) {\n\treturn async function getStaticProps(ctx: any) {\n\t\treturn {\n\t\t\tprops: await getI18nProps(ctx, ns)\n\t\t};\n\t};\n}"
    },
    "You can see, that it returns <span class='code-block'>locale</span> and, optionally, <span class='code-block'>postName</span> or <span class='code-block'>projectName</span>. It allows us to get <span class='code-block'>locale</span> in props and use it, for instance, in redirect function.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { useTranslation } from 'next-i18next';\nimport { getStaticPaths, makeStaticProps } from '@lib/getStatic';\n\ninterface ErrorPageProps {\n\tlocale: string;\n}\n\nconst ErrorPage = ({ locale }: ErrorPageProps) => {\n\tconst { t } = useTranslation();\n\treturn (\n\t\t<>...</>\n\t);\n};\n\nconst getStaticProps = makeStaticProps();\nexport { getStaticPaths, getStaticProps };\n\nexport default ErrorPage;"
    },
    "Items in array for <span class='code-block'>makeStaticProps</span> function have exact same names as JSON files inside locale folder.",
    {
      "type": "subtitle",
      "content": "Light/Dark Themes"
    },
    "Everything is quite easy here. Just <span class='code-block'>Recoil</span> to control the state and localStorage to store the value for color scheme.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "// src/store/global/global.state.ts\n\nimport { atom } from 'recoil';\n\nexport const theme = atom<'dark' | 'light'>({\n\tkey: 'theme',\n\tdefault: 'dark',\n});"
    },
    "Special hook to change the theme:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { useMemo } from 'react';\n\nimport { useRecoilState } from 'recoil';\n\nimport { theme as storeTheme } from '@store/global/global.state';\nimport { DarkTheme } from '@styles/Dark.theme';\nimport { LightTheme } from '@styles/Light.theme';\n\nconst useDarkMode = () => {\n\tconst [theme, setTheme] = useRecoilState(storeTheme);\n\n\tconst toggleTheme = () => {\n\t\tsetTheme(theme === 'light' ? 'dark' : 'light');\n\t};\n\n\tconst themeMode = useMemo(() => (theme === 'light' ? LightTheme : DarkTheme), [theme]);\n\n\treturn [theme, toggleTheme, themeMode] as const;\n};\n\nexport default useDarkMode;"
    },
    "Used in <span class='code-block'>Global.layout.tsx</span> by <span class='code-block'>ThemeProvider</span>:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nimport useDarkMode from '@hooks/useDarkMode.hook';\nimport { DarkTheme } from '@styles/Dark.theme';\nimport { LightTheme } from '@styles/Light.theme';\n\nconst GlobalLayout = ({ children, loading = false }: GlobalLayoutProps) => {\n\tconst [theme] = useDarkMode();\n\n\treturn (\n\t\t<ThemeProvider theme={theme === 'light' ? LightTheme : DarkTheme}>\n\t\t\t...\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default GlobalLayout;"
    },
    "Handler for theme changing has been implemented within <span class='code-block'>Header</span> component.",
    "Two themes described in <span class='code-block'>themes</span> folder. They are implementing interface, that describes what fields are allowed to be used:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "export interface ThemeProps {\n\tcolors: {\n\t\tprimaryLight: string;\n\t\tprimaryDark: string;\n\t\tlightBackground: string;\n\t\tdarkBackground: string;\n\t\ttextColor: string;\n\t\tsvgColor: string;\n\t}\n}"
    },
    {
      "type": "subtitle",
      "content": "Page rendering"
    },
    "As you can see, instead of creating page per post/project only one page per entity has been created. Every page gets the name of the project or post from params and then checks (in environmental variables) check, if page exists it renders it from JSON, in other case it redirects user to 404. Also, it means that every JSON has to be written in certain format.",
    "Here is how it looks like:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { useTranslation } from 'next-i18next';\nimport { useRouter } from 'next/router';\n\nimport { makeStaticProps } from '@lib/getStatic';\n\ninterface PostProps {\n\tlocale: string;\n\tpostName: string;\n}\n\nconst BlogPost = ({ locale, postName }: PostProps) => {\n\tconst { t } = useTranslation();\n\tconst router = useRouter();\n  \n\treturn (\n\t\t<>\n\t\t\t...\n\t\t\t<PostParagraph\n\t\t\t\tdangerouslySetInnerHTML={{ __html: item }}\n\t\t\t/>\n\t\t\t...\n\t\t</>\n\t);\n};\n\nexport const getServerSideProps = async (ctx: any) => {\n\tconst staticProps = await makeStaticProps()(ctx);\n\tconst props = staticProps.props;\n\n\treturn {\n\t\tprops: {\n\t\t\t...props\n\t\t}\n\t};\n};\n\nexport default BlogPost;"
    },
    "As it's been mentioned above, the usage of props for post and project page is a little differ from other pages as in those case we also need to get not only <span class='code-block'>locale</span> but <span class='code-block'>postName</span> (or <span class='code-block'>projectName</span>)",
    "Have you noticed <span class='code-block'>dangerouslySetInnerHTML</span>, well there is one security issue...",
    {
      "type": "title",
      "content": "Security issues"
    },
    "Bruh, security issues?! Yeah, probably you have notices that every blog post is written in JSON format, just specifying all fields and structure of the post itself, like titles, subtitles, code blocks etc. Well, here is the XSS injection attack comes into play. Because I wanted to wrap some text right inside the paragraph just <span class='code-block'>like this</span> for instance, I had to decided how I wanted to do that.",
    "I had a couple of ideas on that, the only requirement was that every post has to be within \"one-page\" structure. Basically, if you take a look at the file structure, as it has been mentioned before, you will find that there is only one page which gets post name from the URL and then just checks (using environmental variables), if the page exists, it \"renders\" it from JSON, otherwise, it redirects to 404 page.",
    {
      "type": "picture",
      "width": "w50",
      "resource": "readme1.png"
    },
    "At this point I guess some of you already has figured out what is the issue. If I need to render HTML that is written as text, I need to use <span class='code-block'>dangerouslySetInnerHTML</span> and this is the straight road to XSS, if text comes from untrusted sources and/or not sanitized.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "<PostParagraph \n\tdangerouslySetInnerHTML={{ __html: item }}\n/>"
    },
    {
      "type": "code",
      "lang": "typescript",
      "content": "[\n\t\"Very last step here is checking if our nginx sever is working correctly\"\n]"
    },
    "Above you have seen an example of how I render simple paragraph. You can easily inject there <span class='code-block'>script</span> tag and do your dirty things. Fortunately, there is only one source, and it's trusted, and it's me :)",
    "As I have mentioned previously, I had a couple of ideas on how to implement that. The way it's been implemented is actually the easiest one. The other quite easy method is simple sanitization. The only thing that would be excluded in this case is <span class='code-block'>script</span> tag. The exact same situation with projects page.",
    "The most completed is to create \"your own tags\" and after pages gets JSON, instead of rendering it at this exact moment, you would pass it to function, that would interpret your tags to normal HTML and return it to the page. Also, it would be the sort of sanitization, as it could be implemented right in that function. Why did I do this way? Well... You know... I'm kinda lazy :)"
  ]
}
