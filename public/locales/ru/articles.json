{
  "nextjsNginxDeployment": {
    "title": "NextJS Nginx Deployment",
    "tags": "",
    "description": "",
    "pageDescription": "Процесс развертывания всегда довольно напряженный, особенно если вы разработчик и не знакомы с тем, чем занимается команда DevOps. Что ж, вот самое простое решение о том, как вы можете развернуть свое приложение Next.js с помощью Nginx. и Letsencrypt для безопасной связи по протоколу HTTPS. Ваша шпаргалка.",
    "intro": "О Боже, ты не представляешь, как раньше я боялся всего, кроме написания кода. Раньше я думал, что это что-то нереальное законченное и опасное, так как твоя ошибка может разрушить буквально все, но потом я попытался, а ты знаете, это звучит намного страшнее, чем на самом деле. Единственное, что вам нужно сделать, это начать с азов.",
    "toc": {
      "whyNginx": "Почему Nginx?",
      "preps": "Подготовка",
      "Конфигурация HTTPS": {
        "certGen": "Создание сертификата",
        "nginxSec": "Конфигурация безопасности Nginx"
      },
      "nginxConfig": "Конфигурация Nginx",
      "appConfig": "Настройка приложения с помощью pm2",
      "conclusion": "Выводы и шпаргалка"
    },
    "p1": "Процесс развёртывания приложения - это всегда стресс, особенно когда ты разработчик, который понятия не имеет, чем занимаются сотрудники DevOps (поверьте мне, я знаю, о чём говорю). Поэтому единственное, чего вы действительно хотите, — это как можно быстрее развернуть ваше приложение более или менее безопасным способом.",
    "p2": "Поздравляем, вы обратились по адресу! В этой статье объясняется, как безопасно развернуть приложение Next.js с помощью Nginx и шифрования HTTPS. Итак, приступим!",
    "p3": "Nginx (произносится как \"engine-x\") — это высокопроизводительный веб-сервер с открытым исходным кодом. Это обратный прокси-сервер, что означает, что он предназначен для передачи входящих запросов от клиентов на другие серверы для дальнейшей обработки. , Это может быть полезно в различных ситуациях, таких как обслуживание статических файлов, проксирование запросов на внутренний сервер или обработка SSL-шифрования.",
    "p4": "Nginx известен своей стабильностью, надежностью и низким потреблением ресурсов, что делает его популярным выбором для веб-администраторов и хостинг-провайдеров. Он может обрабатывать большое количество одновременных подключений, что делает его подходящим для большого трафика. веб-сайты и веб-приложения. Он также имеет широкий спектр функций и параметров конфигурации, включая балансировку нагрузки, кэширование и контроль доступа.",
    "p5": "Помимо использования в качестве веб-сервера, Nginx также можно использовать в качестве обратного прокси-сервера, балансировщика нагрузки и кэша HTTP. Эта универсальность в сочетании с производительностью и стабильностью сделала Nginx популярным выбором среди веб-серверов. разработчики и системные администраторы.",
    "p6": "В целом, Nginx — это мощный и гибкий веб-сервер, который хорошо подходит для широкого спектра приложений и вариантов использования. Независимо от того, обслуживаете ли вы простой веб-сайт, запускаете большое веб-приложение или что-то среднее, Nginx отличный выбор для ваших нужд.",
    "p7": "Мы не будем обсуждать, как и где можно раскрутить инстанс и усложнить его (будь то AWS, DigitalOcean, Microsoft Azure или любой другой провайдер облачных сервисов, который вам нравится). Кстати, вы можете прочитать об этом здесь. (ССЫЛКА НА ПОСТ О ЗАЩИТЕ ИНСТАНСОВ). Вместо этого мы сосредоточимся на процессе установки Nginx, как нашего веб-сервера, и Letsencrypt, как нашего поставщика ЦС, учитывая, что у вас уже есть экземпляр для развертывания.",
    "p8": "Используя следующие 2 команды, вы обновите все пакеты на вашем компьютере и установите необходимые nginx и Letsencrypt.",
    "p9": "Также включите nginx в ufw:",
    "p10": "Самый последний шаг здесь — проверка правильности работы нашего сервера nginx. Для этого перейдите в /etc/nginx/sites-available/default и вставьте следующее содержимое (*q — наш домен):",
    "p11": "Проверьте синтаксические ошибки и перезапустите nginx:",
    "p12": "Let's Encrypt — это бесплатный автоматизированный центр сертификации (CA) с открытым исходным кодом, который предоставляет цифровые сертификаты для шифрования Transport Layer Security (TLS). Эти сертификаты используются для защиты веб-трафика и обеспечения конфиденциальной информации, такой как как пароли и номера кредитных карт, безопасно передаются через Интернет.",
    "p13": "Основная цель Let's Encrypt — сделать шифрование более доступным для широкой публики, предлагая бесплатные и простые в использовании сертификаты. До появления Let's Encrypt получение сертификата могло быть сложным и дорогостоящим процессом. С Let's Encrypt Encrypt, любой может получить сертификат всего за несколько кликов, что позволяет защитить веб-сайт или веб-приложение с минимальными усилиями.",
    "p14": "Let's Encrypt также отличается автоматизированным процессом выпуска и обновления сертификата. Это означает, что после получения сертификата вам не нужно беспокоиться о его ручном продлении в будущем. Сертификат будет автоматически обновляться пока домен остается активным и находится под вашим контролем.",
    "p15": "Подводя итог, Let's Encrypt — это центр сертификации, который меняет правила игры и делает шифрование более доступным. е и доступным для всех. Благодаря бесплатным и простым в использовании сертификатам, автоматизированному процессу обновления и приверженности программному обеспечению с открытым исходным кодом Let's Encrypt является отличным выбором для всех, кто хочет защитить свой веб-сайт или веб-приложение",
    "p16": "Пришло время сгенерировать несколько сертификатов TLS. В этом примере мы собираемся использовать Let's Encrypt, но вы можете использовать любого другого поставщика ЦС, который вам нужен. Как упоминалось ранее, замените *q на ваше доменное имя:" ,
    "p17": "Следующая команда сгенерирует параметры DH. Эти параметры определяют, как OpenSSL выполняет обмен ключами Диффи-Хеллмана (DH). По сути, дополнительный уровень безопасности для вашего HTTPS-соединения:",
    "p18": "Нам нужно защитить наш сервер Nginx, поместив следующую конфигурацию в файл конфигурации ssl-params.conf. С помощью вашего любимого текстового редактора (здесь vim) скопируйте и вставьте следующее содержимое:",
    "p19": "Мы почти закончили настройку. Остались две последние вещи, которые нам нужно сделать, это настроить наш сервер Nginx в качестве обратного прокси-сервера и запустить приложение.",
    "p20": "Давайте начнем с настройки Nginx в качестве обратного прокси-сервера. По сути, здесь нам нужно отредактировать файл nginx и вставить следующий контент (помните, *q для вашего доменного имени):",
    "p21": "Перезапустите службу nginx, и единственное, что нам нужно сделать, это настроить наше приложение как демон с помощью диспетчера процессов pm2.",
    "p22": "PM2 — это менеджер производственных процессов для приложений Node.js. Он предназначен для обеспечения работы ваших приложений Node.js и возможности восстановления после непредвиденных ошибок или сбоев. PM2 предоставляет такие функции, как автоматический перезапуск, автоматическое управление журналами. , и мониторинг процесса.",
    "p23": "PM2 позволяет легко запускать приложения Node.js в фоновом режиме в качестве демона, не беспокоясь о завершении или перезапуске процесса. Это особенно полезно для долго работающих приложений Node.js, таких как веб-приложения. серверов или фоновых рабочих, так как это гарантирует их постоянную доступность и возможность восстановления после любых проблем, которые могут возникнуть.",
    "p24": "Помимо своих функций управления процессами, PM2 также предоставляет мощные возможности мониторинга процессов. Это включает в себя подробную информацию о состоянии и производительности ваших приложений Node.js, такую как использование ЦП и памяти, а также возможность управлять файлами журналов и проверять их.",
    "p25": "PM2 — это популярный инструмент для управления приложениями Node.js в производственных средах, поскольку он упрощает поддержание работоспособности ваших приложений и предоставляет обширную информацию об их состоянии и производительности. Независимо от того, используете ли вы один узел Node. js или несколько приложений в кластере, PM2 — отличный инструмент для управления и мониторинга ваших приложений.",
    "p26": "По сути, здесь нам нужно просто собрать наше приложение, глобально установить приложение pm2 и запустить процесс выполнения рабочей сборки в качестве демона в фоновом режиме:",
    "p27": "Наслаждайтесь своим приложением в рабочем режиме и защищенным HTTPS-соединением! Ниже вы также найдете пару послесловий и небольшое руководство о том, как вы можете управлять своим приложением с помощью этого диспетчера процессов.",
    "p28": "Было довольно просто, да? Это самый простой способ настроить, развернуть и защитить ваше приложение Next.js с помощью Nginx. Но, возможно, у вас есть вопрос вроде: \"Хорошо, это хорошо, но как насчет CI/ Конвейер CD?\". Ну, это на вас. Вы можете настроить его с помощью GitHub Actions, Jenkins или любого другого инструмента конвейера CI/CD, который вы предпочитаете. Но если вы хотите знать, как вы можете выполнить развертывание вручную, вот вам. .",
    "p29": "Самое первое, что вам нужно сделать, это зайти на свой сервер и перейти в папку с вашим проектом. Там вытащите основную (основную) ветку или любую другую ветку, которую вы используете в рабочем режиме, установите все пакеты, соберите проект (используя npm в этом конкретном примере) и перезапустите процесс pm2:",
    "p30": "Кстати, я думаю, вы хотите изменить имя приложения на что-то более понятное для человека. Вот как вы можете это сделать. Прежде всего, введите следующую команду, чтобы получить список всех процессов, обрабатываемых pm2 :",
    "p31": "В результате вы увидите красивую таблицу, взгляните на столбец id, в этот момент, я думаю, вы увидите значение 0, но если нет, просто замените его на свое значение и введите рядом с изменить имя процесса:",
    "p32": "Шпаргалка специально для вас:"
  }
}
