{
  "title": "Личный блог",
  "brief": "Как устроено то, что вы сейчас читаете",
  "description": "Личный блог React + Next.js Typescript и веб-приложение страницы портфолио. Место, где я делюсь своими мыслями и знаниями.",
  "searchTags": ["blog", "typescript", "nextjs"],
  "briefDescription": "Вам может быть интересно, как этот блог был создан с точки зрения программирования, поэтому я хотел дать вам краткий обзор инструментов и технологий, которые я использовал.",
  "license": "MIT лизенция",
  "techStack": [
    { "src": "javascript", "width": 126, "height": 28 },
    { "src": "typescript", "width": 126, "height": 28 },
    { "src": "react", "width": 85, "height": 28 },
    { "src": "next.js", "width": 85, "height": 28 },
    { "src": "digitalOcean", "width": 130, "height": 28 },
    { "src": "amazon-aws", "width": 74, "height": 28 },
    { "src": "nginx", "width": 88, "height": 28 }
  ],
  "projectPages": [
    {
      "link": "https://blog.mikhailbahdashych.me",
      "text": "blog.mikhailbahdashych.me"
    },
    {
      "link": "https://github.com/bl4drnnr/personal-blog",
      "text": "github.com/bl4drnnr/personal-blog"
    }
  ],
  "toc": {
    "Структура и реализация": {
      "multiLang": "Многоязычность",
      "lightDarkThemes": "Светлые/темные темы",
      "pageRendering": "Рендеринг страницы"
    },
    "secIssues": "Проблемы с безопасностью"
  },
  "content": [
    {
      "type": "title",
      "content": "Структура и реализация"
    },
    "Я думаю, что первое, что вам нужно знать о блоге, это то, что это самое простое статическое приложение. Несмотря на то, что нет никакого API или серверной части, из которой можно было бы получать сообщения, вы не увидите страницу структуры для каждого поста. На самом деле страницы действительно рендерятся, но из JSON, и это будет описано позже.",
    {
      "type": "subtitle",
      "content": "Многоязычность"
    },
    "Во-первых, блог написан на 3-х языках (не программирования, лол) - польском, английском и русском. Это реализовано с помощью библиотеки <span class='code-block'>i18n</span> (весьма очевидно, не так ли).",
    "В корневой папке проекта вы найдете простой файл конфигурации с именем <span class='code-block'>next-i18next.config.js</span>, который содержит доступные языки и языки по умолчанию:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "module.exports = {\n\ti18n: {\n\t\tdefaultLocale: 'en',\n\t\tlocales: ['en', 'pl', 'ru'],\n  },\n \treact: { useSuspense: false }\n};"
    },
    "В папке <span class='code-block'>lib</span> вы найдете пару функций, отвечающих за весь процесс перевода. О них пойдет речь прямо сейчас, но следует упомянуть еще об одном.",
    "В папке <span class='code-block'>locales</span> вы найдете еще пару папок. Глядя на их имена вполне понятно, за что они отвечают. В каждой папке есть файлы JSON с одинаковыми именами (даже с одинаковой структурой), которые содержат весь текст, который вы видите в блоге, переведенный на 3 языка. Итак, теперь вы знаете, где все хранится, и мы можем вернуться к папке lib.",
    "Первый — <span class='code-block'>language detector</span> содержит это (<span class='code-block'>i18conifg</span> — это псевдоним для <span class='code-block '>next-i18next.config.js</span>):",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import languageDetector from 'next-language-detector';\n\nimport i18nextConfig from '@i18config';\n\nexport default languageDetector({\n\tsupportedLngs: i18nextConfig.i18n.locales,\n\tfallbackLng: i18nextConfig.i18n.defaultLocale\n});"
    },
    "Приведенный выше код является вспомогательным для <span class='code-block'>страницы перенаправления</span>. Это просто пустая страница, которая используется для проверки текущего языка:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { useRouter } from 'next/router';\n\nimport languageDetector from './languageDetector';\n\nconst useRedirect = (to: any) => {\n\tconst router = useRouter();\n\tto = to || router.asPath;\n\n\tReact.useEffect(() => {\n\t\tconst detectedLng = languageDetector.detect();\n\t\tif (to.startsWith('/' + detectedLng) && router.route === '/404') {\n\t\t\trouter.replace('/' + detectedLng + router.route);\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tlanguageDetector.cache(detectedLng);\n\t\trouter.replace('/' + detectedLng + to);\n\t});\n\n\treturn <></>;\n};\n\nexport const Redirect = () => {\n\t// @ts-ignore\n\tuseRedirect();\n\treturn <></>;\n};"
    },
    "Наверное, вы видели, что маршрут блога всегда выглядит так: <span class='code-block'>blog.mikhailbahdashych.com/en</span>. Он всегда начинается с выбранного языка. Вы поймете, почему это происходит, просто взглянув на папку <span class='code-block'>pages</span>.",
    {
      "type": "picture",
      "width": "w30",
      "resource": "readme2.png"
    },
    "Содержимое каждой страницы за пределами маршрута <span class='code-block'>[locale]</span> было заменено на:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { Redirect } from '@lib/redirect';\n\nexport default Redirect;"
    },
    "Поэтому каждый раз, когда вы пытаетесь пойти по неправильному маршруту, вы либо перенаправляетесь на 404, либо на основной маршрут. Кроме того, в файле <span class='code-block'>_app.tsx</span> для включения <span class='code-block'>i18n</span> приложение экспортируется с <span class='code-block'>appWithTranslation</span> оболочка:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "export default appWithTranslation(App);"
    },
    "И последнее, но не менее важное — это файл <span class='code-block'>getStatic</span>, который отвечает за реквизиты страниц и получение языка.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { serverSideTranslations } from 'next-i18next/serverSideTranslations';\n\nimport i18nextConfig from '@i18config';\n\nexport const getI18nPaths = () =>\n\ti18nextConfig.i18n.locales.map((lang) => ({\n\t\tparams: {\n\t\t\tlocale: lang\n\t\t}\n\t}));\n\nexport const getStaticPaths = () => ({\n\tfallback: false,\n\tpaths: getI18nPaths()\n});\n\nexport async function getI18nProps(ctx: any, ns = ['pages', 'components', 'errors', 'articles']) {\n\tconst locale = await ctx?.params?.locale;\n\tconst postName = await ctx?.params?.postName || null;\n\tconst projectName = await ctx?.params?.projectName || null;\n\n\treturn {\n\t\t...(await serverSideTranslations(locale, ns)),\n\t\tlocale,\n\t\tpostName,\n\t\tprojectName\n\t};\n}\n\n\nexport function makeStaticProps(ns: string[]) {\n\treturn async function getStaticProps(ctx: any) {\n\t\treturn {\n\t\t\tprops: await getI18nProps(ctx, ns)\n\t\t};\n\t};\n}"
    },
    "Как видите, он возвращает <span class='code-block'>locale</span> и, при желании, <span class='code-block'>postName</span> или <span class='code-block '>projectName</span>. Это позволяет нам получить <span class='code-block'>locale</span> в свойствах и использовать его, например, в функции перенаправления.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { useTranslation } from 'next-i18next';\nimport { getStaticPaths, makeStaticProps } from '@lib/getStatic';\n\ninterface ErrorPageProps {\n\tlocale: string;\n}\n\nconst ErrorPage = ({ locale }: ErrorPageProps) => {\n\tconst { t } = useTranslation();\n\treturn (\n\t\t<>...</>\n\t);\n};\n\nconst getStaticProps = makeStaticProps();\nexport { getStaticPaths, getStaticProps };\n\nexport default ErrorPage;"
    },
    "Элементы в массиве для функции <span class='code-block'>makeStaticProps</span> имеют те же имена, что и файлы JSON внутри папки locale.",
    {
      "type": "subtitle",
      "content": "Светлые/темные темы"
    },
    "Здесь все достаточно легко. Просто <span class='code-block'>Recoil</span> для управления состоянием и localStorage для хранения значения цветовой схемы.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "// src/store/global/global.state.ts\n\nimport { atom } from 'recoil';\n\nexport const theme = atom<'dark' | 'light'>({\n\tkey: 'theme',\n\tdefault: 'dark',\n});"
    },
    "Специальный хук для смены темы:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { useMemo } from 'react';\n\nimport { useRecoilState } from 'recoil';\n\nimport { theme as storeTheme } from '@store/global/global.state';\nimport { DarkTheme } from '@styles/Dark.theme';\nimport { LightTheme } from '@styles/Light.theme';\n\nconst useDarkMode = () => {\n\tconst [theme, setTheme] = useRecoilState(storeTheme);\n\n\tconst toggleTheme = () => {\n\t\tsetTheme(theme === 'light' ? 'dark' : 'light');\n\t};\n\n\tconst themeMode = useMemo(() => (theme === 'light' ? LightTheme : DarkTheme), [theme]);\n\n\treturn [theme, toggleTheme, themeMode] as const;\n};\n\nexport default useDarkMode;"
    },
    "Используется в <span class='code-block'>Global.layout.tsx</span> от <span class='code-block'>ThemeProvider</span>:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nimport useDarkMode from '@hooks/useDarkMode.hook';\nimport { DarkTheme } from '@styles/Dark.theme';\nimport { LightTheme } from '@styles/Light.theme';\n\nconst GlobalLayout = ({ children, loading = false }: GlobalLayoutProps) => {\n\tconst [theme] = useDarkMode();\n\n\treturn (\n\t\t<ThemeProvider theme={theme === 'light' ? LightTheme : DarkTheme}>\n\t\t\t...\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default GlobalLayout;"
    },
    "Обработчик смены темы реализован в компоненте <span class='code-block'>Header</span>.",
    "Две темы описаны в папке <span class='code-block'>themes</span>. Они реализуют интерфейс, который описывает, какие поля разрешено использовать:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "export interface ThemeProps {\n\tcolors: {\n\t\tprimaryLight: string;\n\t\tprimaryDark: string;\n\t\tlightBackground: string;\n\t\tdarkBackground: string;\n\t\ttextColor: string;\n\t\tsvgColor: string;\n\t}\n}"
    },
    {
      "type": "subtitle",
      "content": "Рендеринг страницы"
    },
    "Как видите, вместо создания страницы для каждого поста/проекта была создана только одна страница для каждого объекта. Каждая страница получает имя проекта или сообщения из параметров, а затем проверяет (в переменных среды) проверку, если страница существует, она отображает ее из JSON, в противном случае она перенаправляет пользователя на 404. Кроме того, это означает, что каждый JSON должен быть записаны в определенном формате:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { useTranslation } from 'next-i18next';\nimport { useRouter } from 'next/router';\n\nimport { makeStaticProps } from '@lib/getStatic';\n\ninterface PostProps {\n\tlocale: string;\n\tpostName: string;\n}\n\nconst BlogPost = ({ locale, postName }: PostProps) => {\n\tconst { t } = useTranslation();\n\tconst router = useRouter();\n  \n\treturn (\n\t\t<>\n\t\t\t...\n\t\t\t<PostParagraph\n\t\t\t\tdangerouslySetInnerHTML={{ __html: item }}\n\t\t\t/>\n\t\t\t...\n\t\t</>\n\t);\n};\n\nexport const getServerSideProps = async (ctx: any) => {\n\tconst staticProps = await makeStaticProps()(ctx);\n\tconst props = staticProps.props;\n\n\treturn {\n\t\tprops: {\n\t\t\t...props\n\t\t}\n\t};\n};\n\nexport default BlogPost;"
    },
    "Как было сказано выше, использование props для поста и страницы проекта немного отличается от других страниц, так как в этом случае нам также нужно получить не только <span class='code-block'>locale</span>, но и <span class='code-block'>postName</span> (или <span class='code-block'>projectName</span>)",
    "Вы заметили <span class='code-block'>dangerouslySetInnerHTML</span>? Есть одна проблема с безопасностью...",
    {
      "type": "title",
      "content": "Проблемы с безопасностью"
    },
    "Блин, проблемы с безопасностью?! Да, наверное, вы заметили, что каждый пост в блоге пишется в формате JSON, просто указываются все поля и структура самого поста, такие как заголовки, субтитры, блоки кода и т. д. Ну, вот в игру вступает атака с внедрением XSS. Поскольку я хотел обернуть некоторый текст прямо внутри абзаца, например, <span class='code-block'>вот так</span>, мне нужно было решить, как я хочу это сделать.",
    "У меня было несколько идей по этому поводу, единственным требованием было то, что каждый пост должен быть в рамках \"одностраничной\" структуры. По сути, если вы посмотрите на файловую структуру, как уже упоминалось ранее, вы обнаружите, что есть только одна страница, которая получает имя сообщения из URL-адреса, а затем просто проверяет (используя переменные среды), существует ли страница, он \"рендерит\" его из JSON, иначе перенаправляет на страницу 404.",
    {
      "type": "picture",
      "width": "w50",
      "resource": "readme1.png"
    },
    "На данный момент, я думаю, некоторые из вас уже поняли, в чем проблема. Если мне нужно отобразить HTML, который написан как текст, мне нужно использовать <span class='code-block'>dangerouslySetInnerHTML</span>, и это прямая дорога к XSS, если текст поступает из ненадежных источников и/или не продезинфицирован.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "<PostParagraph \n\tdangerouslySetInnerHTML={{ __html: item }}\n/>"
    },
    {
      "type": "code",
      "lang": "typescript",
      "content": "[\n\t\"Very last step here is checking if our nginx sever is working correctly\"\n]"
    },
    "Выше вы видели пример того, как я визуализирую простой абзац. Вы можете легко внедрить туда тег <span class='code-block'>script</span> и делать свои грязные дела. К счастью, есть только один источник, и он надежный, и это я :)",
    "Как я уже упоминал ранее, у меня было несколько идей, как это реализовать. То, как это было реализовано, на самом деле является самым простым. Другой довольно простой метод — простая санитарная обработка. Единственное, что будет исключено в этом случае, это тег <span class='code-block'>script</span>. Точно такая же ситуация со страницей проектов.",
    "Наиболее совершенным является создание \"ваших собственных тегов\", и после того, как страницы получат JSON, вместо того, чтобы отображать его в этот конкретный момент, вы передадите его функции, которая интерпретирует ваши теги в обычный HTML и вернет их на страницу. Кроме того, это будет своего рода дезинфекция, поскольку ее можно реализовать прямо в этой функции. Почему я поступил так? Ну... знаешь... я немного ленивый :)"
  ]
}
