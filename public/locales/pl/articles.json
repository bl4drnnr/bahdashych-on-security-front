{
  "nextjs-nginx-deployment": {
    "title": "NextJS Nginx Deployment",
    "tags": "",
    "description": "",
    "pageDescription": "Proces wdrażania jest zawsze dość stresujący, zwłaszcza jeśli jesteś programistą i nie jesteś zaznajomiony z tym, czym zajmuje się zespół DevOps. Oto najłatwiejsze rozwiązanie, jak wdrożyć aplikację Next.js przy użyciu Nginx i Letsencrypt do bezpiecznej komunikacji HTTPS. Twoja ściągawka.",
    "intro": "O Boże, nie masz pojęcia, jak bałam się wszystkiego poza pisaniem kodu. Kiedyś myślałam, że to coś nierealnego, ukończonego i niebezpiecznego, ponieważ twój błąd może zniszczyć dosłownie wszystko, ale potem spróbowałam i ty wiesz, brzmi to o wiele bardziej przerażająco niż jest w rzeczywistości. Jedyne, co musisz zrobić, to zacząć od podstaw.",
    "toc": {
      "intro": "Wstęp",
      "whyNginx": "Dlaczego Nginx?",
      "preps": "Przygotowania",
      "Konfiguracja HTTPS": {
        "certGen": "Generowanie certyfikatu",
        "nginxSec": "Konfiguracja zabezpieczeń Nginx"
      },
      "nginxConfig": "Konfiguracja Nginx",
      "appConfig": "Konfiguracja aplikacji przy użyciu pm2",
      "conclusion": "Wnioski i ściągawka"
    },
    "p1": "Proces wdrożenia aplikacji zawsze wiąże się ze stresem, zwłaszcza gdy jest się programistą, który nie ma pojęcia, czym zajmuje się zespół DevOps (wierzcie mi, wiem, o czym mówię). jedyne, czego naprawdę chcesz, to jak najszybsze wdrożenie aplikacji w mniej lub bardziej bezpieczny sposób.",
    "p2": "No cóż, gratulacje, trafiłeś we właściwe miejsce! Ten artykuł wyjaśni, w jaki sposób możesz wdrożyć swoją aplikację Next.js przy użyciu Nginx w bezpieczny sposób i szyfrowanie HTTPS. A więc zaczynajmy!",
    "p3": "Nginx (wymawiane jako \"engine-x\") to wysokowydajny serwer sieciowy typu open source. Jest to odwrotny serwer proxy, co oznacza, że jest przeznaczony do przekazywania żądań przychodzących od klientów do innych serwerów w celu dalszego przetwarzania Może to być przydatne w różnych sytuacjach, takich jak udostępnianie plików statycznych, przesyłanie żądań proxy do serwera zaplecza lub obsługa szyfrowania SSL.",
    "p4": "Nginx jest znany ze swojej stabilności, solidności i niskiego zużycia zasobów, co czyni go popularnym wyborem dla administratorów stron internetowych i dostawców usług hostingowych. Może obsłużyć dużą liczbę jednoczesnych połączeń, dzięki czemu dobrze nadaje się do obsługi dużego ruchu stron internetowych i aplikacji internetowych. Posiada również szeroki zakres funkcji i opcji konfiguracyjnych, w tym równoważenie obciążenia, buforowanie i kontrolę dostępu.",
    "p5": "Oprócz zastosowania jako serwer WWW, Nginx może być również używany jako odwrotne proxy, moduł równoważenia obciążenia i pamięć podręczna HTTP. Ta wszechstronność w połączeniu z wydajnością i stabilnością sprawiła, że Nginx jest popularnym wyborem wśród sieci programistów i administratorów systemu.",
    "p6": "Ogólnie rzecz biorąc, Nginx to potężny i elastyczny serwer sieciowy, który dobrze nadaje się do szerokiego zakresu aplikacji i przypadków użycia. Niezależnie od tego, czy obsługujesz prostą witrynę internetową, uruchamiasz dużą aplikację internetową, czy cokolwiek pomiędzy, Nginx jest doskonałym wyborem dla Twoich potrzeb.",
    "p7": "Nie będziemy omawiać, jak i gdzie można uruchomić instancję i ją wzmocnić (albo AWS, DigitalOcean, Microsoft Azure, albo jakikolwiek inny dostawca usług w chmurze). Nawiasem mówiąc, możesz o tym przeczytać tutaj (LINK DO POSTU O UTWARDZANIU INSTANCJI). Zamiast tego skupimy się na procesie instalacji Nginx, jako naszego serwera WWW i Letsencrypt, jako naszego dostawcy CA, biorąc pod uwagę, że masz już instancję do wdrożenia.",
    "p8": "Korzystając z kolejnych 2 poleceń zaktualizujesz wszystkie pakiety na swoim komputerze i zainstalujesz wymagane nginx i Letsencrypt.",
    "p9": "Włącz także nginx w ufw:",
    "p10": "Ostatnim krokiem jest sprawdzenie, czy nasz serwer nginx działa poprawnie. W tym celu przejdź do /etc/nginx/sites-available/default i wklej następną zawartość (*q to nasza domena):",
    "p11": "Sprawdź błędy składniowe i zrestartuj nginx:",
    "p12": "Let's Encrypt to bezpłatny, otwarty i zautomatyzowany urząd certyfikacji (CA), który zapewnia cyfrowe certyfikaty do szyfrowania Transport Layer Security (TLS). Certyfikaty te służą do zabezpieczania ruchu sieciowego i zapewnienia, że poufne informacje, takie jak jak hasła i numery kart kredytowych, są bezpiecznie przesyłane przez Internet.",
    "p13": "Głównym celem Let's Encrypt jest uczynienie szyfrowania bardziej dostępnym dla ogółu społeczeństwa poprzez oferowanie bezpłatnych i łatwych w użyciu certyfikatów. Przed Let's Encrypt uzyskanie certyfikatu mogło być skomplikowanym i kosztownym procesem. Z Let's Encrypt Szyfruj, każdy może uzyskać certyfikat za pomocą zaledwie kilku kliknięć, dzięki czemu można zabezpieczyć stronę internetową lub aplikację internetową przy minimalnym wysiłku.",
    "p14": "Let's Encrypt wyróżnia się również zautomatyzowanym procesem wydawania i odnawiania certyfikatów. Oznacza to, że po uzyskaniu certyfikatu nie musisz się martwić o ręczne odnawianie go w przyszłości. Certyfikat odnowi się automatycznie tak długo, jak domena pozostaje aktywna i pod Twoją kontrolą.",
    "p15": "Podsumowując, Let's Encrypt to przełomowy urząd certyfikacji, który ułatwia dostęp do szyfrowania e i przystępne cenowo dla każdego. Dzięki darmowym i łatwym w użyciu certyfikatom, zautomatyzowanemu procesowi odnawiania i zaangażowaniu w oprogramowanie typu open source, Let's Encrypt to doskonały wybór dla każdego, kto chce zabezpieczyć swoją stronę internetową lub aplikację internetową.",
    "p16": "Czas wygenerować certyfikaty TLS. W tym przykładzie użyjemy Let's Encrypt, ale możesz użyć dowolnego innego dostawcy CA. Jak wspomniano wcześniej, zastąp *q nazwą swojej domeny:" ,
    "p17": "Następne polecenie wygeneruje parametry DH. Parametry te określają, w jaki sposób OpenSSL przeprowadza wymianę kluczy Diffie-Hellman (DH). Zasadniczo dodatkowa warstwa bezpieczeństwa dla połączenia HTTPS:",
    "p18": "Musimy zabezpieczyć nasz serwer Nginx poprzez umieszczenie kolejnej konfiguracji w pliku konfiguracyjnym ssl-params.conf. Używając swojego ulubionego edytora tekstu (vim tutaj) skopiuj i wklej następną zawartość:",
    "p19": "Już prawie skończyliśmy konfigurację. Dwie ostatnie rzeczy, które musimy zrobić, to skonfigurować nasz serwer Nginx jako odwrotny serwer proxy i uruchomić aplikację.",
    "p20": "Zacznijmy od konfiguracji Nginx jako odwrotnego proxy. Zasadniczo tutaj musimy wyedytować plik nginx i wkleić następną zawartość (pamiętaj, że *q oznacza nazwę Twojej domeny):",
    "p21": "Zrestartuj usługę nginx i jedyne, co musimy zrobić, to skonfigurować naszą aplikację jako demona przy użyciu menedżera procesów pm2.",
    "p22": "PM2 to menedżer procesów produkcyjnych dla aplikacji Node.js. Jest przeznaczony do utrzymywania działania aplikacji Node.js i przywracania sprawności po nieoczekiwanych błędach lub awariach. PM2 zapewnia takie funkcje, jak automatyczne ponowne uruchamianie, automatyczne zarządzanie dziennikami i monitorowanie procesu.",
    "p23": "PM2 ułatwia uruchamianie aplikacji Node.js w tle jako demon, bez martwienia się o przerwanie lub ponowne uruchomienie procesu. Jest to szczególnie przydatne w przypadku długo działających aplikacji Node.js, takich jak web serwerów lub pracowników działających w tle, ponieważ gwarantuje, że są one zawsze dostępne i mogą naprawić wszelkie problemy, które mogą się pojawić.",
    "p24": "Oprócz funkcji zarządzania procesami, PM2 zapewnia również zaawansowane możliwości monitorowania procesów. Obejmuje to szczegółowe informacje o stanie i wydajności aplikacji Node.js, takie jak użycie procesora i pamięci, a także możliwość zarządzaj plikami dziennika i sprawdzaj je.",
    "p25": "PM2 jest popularnym narzędziem do zarządzania aplikacjami Node.js w środowiskach produkcyjnych, ponieważ ułatwia utrzymanie działania aplikacji i dostarcza wielu informacji o ich statusie i wydajności. Niezależnie od tego, czy korzystasz z pojedynczego Node. js lub wiele aplikacji w klastrze, PM2 jest doskonałym narzędziem do zarządzania i monitorowania aplikacji.",
    "p26": "W zasadzie tutaj musimy po prostu zbudować naszą aplikację, zainstalować globalnie aplikację pm2 i uruchomić proces wykonywanej kompilacji produkcyjnej jako demon w tle:",
    "p27": "Ciesz się swoją aplikacją w trybie produkcyjnym i bezpiecznym połączeniem HTTPS! Poniżej znajdziesz również kilka posłów i mały poradnik jak zarządzać swoją aplikacją za pomocą tego menedżera procesów.",
    "p28": "Było całkiem łatwo, co? To najłatwiejszy sposób na skonfigurowanie, wdrożenie i zabezpieczenie aplikacji Next.js za pomocą Nginx. Ale może masz pytanie typu: \"Dobra, wszystko w porządku, ale co z CI/ Potok CD?\". Cóż, to jest twoje. Możesz go skonfigurować za pomocą GitHub Actions, Jenkinsa lub dowolnego preferowanego narzędzia potoku CI/CD. Ale jeśli chcesz wiedzieć, jak możesz przeprowadzić wdrożenie ręcznie, proszę bardzo ",
    "p29": "Pierwszą rzeczą, którą musisz zrobić, to udać się na swój serwer i przejść do folderu ze swoim projektem. Tam pociągnij gałąź główną (główną) lub inną, której używasz w trybie produkcyjnym, zainstaluj wszystkie pakiety, zbuduj projekt (używając npm w tym konkretnym przykładzie) i zrestartuj proces pm2:",
    "p30": "Przy okazji, myślę, że chcesz zmienić nazwę aplikacji na bardziej czytelną dla człowieka. Oto jak możesz to zrobić. Najpierw wpisz polecenie next, aby uzyskać listę wszystkich procesów obsługiwanych przez pm2 :",
    "p31": "W rezultacie zobaczysz ładnie wyglądającą tabelę, spójrz na kolumnę id, w tym momencie, jak sądzę, zobaczysz wartość 0, ale jeśli nie, po prostu zamień ją na swoją wartość i wpisz obok zmień nazwę procesu:",
    "p32": "Ściągawka specjalnie dla Ciebie:"
  }
}

