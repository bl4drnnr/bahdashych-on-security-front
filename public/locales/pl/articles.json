{
  "nextjs-nginx-deployment": {
    "title": "NextJS Nginx Deployment",
    "tags": "nextjs,nginx,deployment,mikhail,bahdashych,mikhail bahdashych,blog",
    "description": "NextJS Nginx deployment process",
    "pageDescription": "Proces wdrażania jest zawsze dość stresujący, zwłaszcza jeśli jesteś programistą i nie jesteś zaznajomiony z tym, czym zajmuje się zespół DevOps. Oto najłatwiejsze rozwiązanie, jak wdrożyć aplikację Next.js przy użyciu Nginx i Letsencrypt do bezpiecznej komunikacji HTTPS. Twoja ściągawka.",
    "intro": "O Boże, nie masz pojęcia, jak bałam się wszystkiego poza pisaniem kodu. Kiedyś myślałam, że to coś nierealnego i niebezpiecznego, ponieważ twój błąd może zniszczyć dosłownie wszystko, ale potem spróbowałam i ty wiesz, brzmi to o wiele bardziej przerażająco niż jest w rzeczywistości. Jedyne, co musisz zrobić, to zacząć od podstaw.",
    "timestamp": "2023-02-17",
    "footer": "To wszystko na dziś chłopaki. Dziękuję za przeczytanie, mam nadzieję, że było to pomocne i rozwiązało problem, na który natrafiłeś tutaj, szukając rozwiązania.",
    "toc": {
      "intro": "Introduction",
      "whyNginx": "Dlaczego Nginx?",
      "preps": "Przygotowania",
      "Konfiguracja HTTPS": {
        "certGen": "Generowanie certyfikatów",
        "nginxSec": "Konfiguracja zabezpieczeń Nginx"
      },
      "nginxConfig": "Konfiguracja Nginx",
      "appConfig": "Konfiguracja aplikacji przy użyciu pm2",
      "conclusion": "Wnioski i ściągawka",
      "references": "Kontakt i referencje"
    },
    "content": {
      "p0": {
        "type": "title",
        "content": "Introduction"
      },
      "p1": "Proces wdrażania aplikacji jest zawsze rodzajem stresu, zwłaszcza gdy jesteś programistą, który nie ma pojęcia, co robi personel DevOps (zaufaj mi, wiem o czym mówię). Dlatego jedyne, czego naprawdę chcesz, to jak najszybsze wdrożenie aplikacji w mniej lub bardziej bezpieczny sposób.",
      "p2": "Cóż, gratulacje, trafiłeś we właściwe miejsce! W tym artykule wyjaśnimy, jak możesz wdrożyć następny.aplikacja js wykorzystująca nginx w bezpieczny sposób i szyfrowanie HTTPS. Więc zacznijmy!",
      "p3": {
        "type": "title",
        "content": "Dlaczego Nginx?"
      },
      "p4": "Nginx (wymawiane 'engine-x') to wysokowydajny serwer WWW o otwartym kodzie źródłowym. Jest to odwrotny serwer proxy, co oznacza, że jest przeznaczony do przekazywania przychodzących żądań od klientów do innych serwerów w celu dalszego przetwarzania. Może to być przydatne w różnych sytuacjach, takich jak obsługa plików statycznych, proxy żądań do serwera zaplecza lub obsługa szyfrowania SSL.",
      "p5": "Nginx jest znany ze swojej stabilności, solidności i niskiego zużycia zasobów, co czyni go popularnym wyborem dla administratorów sieci i dostawców hostingu. Może obsługiwać dużą liczbę jednoczesnych połączeń, dzięki czemu doskonale nadaje się do witryn i aplikacji internetowych o dużym natężeniu ruchu. Posiada również szeroki zakres funkcji i opcji konfiguracyjnych, w tym równoważenie obciążenia, buforowanie i kontrolę dostępu.",
      "p6": "Oprócz wykorzystania jako serwer WWW, Nginx może być również używany jako odwrotny serwer proxy, moduł równoważenia obciążenia i pamięć podręczna HTTP. Ta wszechstronność w połączeniu z wydajnością i stabilnością sprawiła, że Nginx stał się popularnym wyborem wśród twórców stron internetowych i administratorów systemów.",
      "p7": "Ogólnie rzecz biorąc, Nginx to potężny i elastyczny serwer WWW, który doskonale nadaje się do szerokiej gamy aplikacji i przypadków użycia. Niezależnie od tego, czy obsługujesz prostą stronę internetową, uruchamiasz dużą aplikację internetową, czy cokolwiek pomiędzy, Nginx jest doskonałym wyborem dla Twoich potrzeb.",
      "p8": {
        "type": "title",
        "content": "Przygotowania"
      },
      "p9": "Nie będziemy dyskutować, jak i gdzie można uruchomić instancję i jak to wszysyko skonfigurować (AWS, DigitalOcean, Microsoft Azure lub jakikolwiek inny dostawca usług w chmurze). Przy okazji, możesz przeczytać o tym tutaj (LINK do Postu o instancjach HARDERING). Zamiast tego skupimy się na procesie instalacji Nginx, jako naszego serwera WWW, i Letsencrypt, jako naszego dostawcy CA, biorąc pod uwagę, że masz już instancję do wdrożenia.",
      "p10": "Za pomocą kolejnych 2 poleceń zaktualizujesz wszystkie pakiety na swoim komputerze i zainstalujesz wymagane nginx i Letsencrypt:",
      "p11": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo apt update && sudo apt upgrade\n$ sudo apt install nginx letsencrypt"
      },
      "p12": "Włącz także nginx w ufw:",
      "p13": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo ufw allow 'Nginx Full'"
      },
      "p14": "Ostatnim krokiem jest sprawdzenie, czy nasz serwer nginx działa poprawnie. Aby to zrobić, przejdź do <span class='code-block'>/etc/nginx/sites-available/default</span> i wklej następną zawartość (<span class='code-block'>*q</span> to nasza domena):",
      "p15": {
        "type": "code",
        "lang": "bash",
        "content": "$ sudo vim /etc/nginx/sites-available/default"
      },
      "p16": {
        "type": "code",
        "lang": "nginx",
        "content": "server {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n\troot /var/www/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\n\tserver_name q*;\n\n\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t}\n\n\t# letsencrypt\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      "p17": "Sprawdź błędy składniowe i uruchom ponownie nginx:",
      "p18": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n$ sudo systemctl restart nginx"
      },
      "p19": {
        "type": "title",
        "content": "Konfiguracja HTTPS"
      },
      "p20": "Let's Encrypt to darmowy, otwarty i zautomatyzowany urząd certyfikacji (CA), który zapewnia cyfrowe certyfikaty do szyfrowania Transport Layer Security (TLS). Certyfikaty te służą do zabezpieczenia ruchu w sieci i zapewnienia bezpiecznego przesyłania poufnych informacji, takich jak hasła i numery kart kredytowych, przez internet.",
      "p21": "Głównym celem Let's Encrypt jest uczynienie szyfrowania bardziej dostępnym dla ogółu społeczeństwa poprzez oferowanie bezpłatnych i łatwych w użyciu certyfikatów. Przed Let's Encrypt uzyskanie certyfikatu może być skomplikowanym i kosztownym procesem. Dzięki Let's Encrypt każdy może uzyskać certyfikat za pomocą zaledwie kilku kliknięć, umożliwiając zabezpieczenie strony internetowej lub aplikacji internetowej przy minimalnym wysiłku.",
      "p22": "Let's Encrypt wyróżnia się również automatycznym procesem wydawania i odnawiania certyfikatów. Oznacza to, że po uzyskaniu certyfikatu nie musisz się martwić o ręczne odnowienie go w przyszłości. Certyfikat odnowi się automatycznie, o ile domena pozostanie aktywna i będzie pod twoją kontrolą.",
      "p23": "Podsumowując, Let's Encrypt to przełomowy urząd certyfikacji, dzięki któremu szyfrowanie jest bardziej dostępne i przystępne dla każdego. Dzięki darmowym i łatwym w użyciu certyfikatom, zautomatyzowanemu procesowi odnawiania i zaangażowaniu w oprogramowanie open source, Let's Encrypt jest doskonałym wyborem dla każdego, kto chce zabezpieczyć swoją stronę internetową lub aplikację internetową.",
      "p24": {
        "type": "subtitle",
        "content": "Generowanie certyfikatów"
      },
      "p25": "Czas wygenerować certyfikaty TLS. W tym przykładzie użyjemy Let's Encrypt, ale możesz użyć dowolnego innego dostawcy CA, którego chcesz. Jak wspomniano wcześniej, zastąp <span class= 'code-block'>*q</span> nazwą domeny:",
      "p26": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d *q"
      },
      "p27": "Następne polecenie wygeneruje parametry DH. Te parametry określają sposób, w jaki OpenSSL wykonuje wymianę kluczy Diffie-Hellman (DH). Zasadniczo dodatkowa warstwa bezpieczeństwa dla połączenia HTTPS:",
      "p28": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
      },
      "p29": {
        "type": "subtitle",
        "content": "Konfiguracja zabezpieczeń Nginx"
      },
      "p30": "Musimy zabezpieczyć nasz serwer Nginx, umieszczając następną konfigurację do ssl-params.conf. Korzystając z ulubionego edytora tekstu (vim tutaj) skopiuj i wklej następną zawartość:",
      "p31": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo vim /etc/nginx/snippets/ssl-params.conf"
      },
      "p32": {
        "type": "code",
        "lang": "bash",
        "content": "ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\nssl_ecdh_curvesecp384r1;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\n\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n\nadd_header Strict-Transport-Security \"max-age=63072000;includeSubdomains\";\nadd_header X-Frame-Options DENY;\nadd_headerX-Content-Type-Options nosniff;\n\nssl_dhparam /etc/ssl/certs/dhparam.pem;"
      },
      "p33": {
        "type": "title",
        "content": "Konfiguracja Nginx"
      },
      "p34": "Prawie skończyliśmy z konfiguracją. 2 ostatnie rzeczy, które musimy zrobić, to skonfigurować serwer Nginx jako odwrotny serwer proxy i uruchomić aplikację.",
      "p35": "Zacznijmy od konfiguracji Nginx jako odwrotnego serwera proxy. Zasadniczo musimy tutaj edytować plik nginx i wkleić następną zawartość (pamiętaj, <span class='code-block'>*q</span> jest dla Twojej nazwy domeny):",
      "p36": {
        "type": "code",
        "lang": "bash",
        "content": "$ sudo vim /etc/nginx/sites-available/default"
      },
      "p37": {
        "type": "code",
        "lang": "nginx",
        "content": "# redirect z http na https\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\tserver_name *q;\n\treturn 301 https://$server_name$request_uri;\n}\n\nserver {\n\t# listen on *:443 -> ssl; instead of *:80\n\tlisten 443 ssl http2 default_server;\n\tlisten [::]:443 ssl http2 default_server;\n\n\tserver_name q*;\n\n\tssl_certificate /etc/letsencrypt/live/*q/fullchain.pem;\n\tssl_certificate_key /etc/letsencrypt/live/*q/privkey.pem;\n\tinclude snippets/ssl-params.conf;\n\n\tlocation / {\n\t\t# reverse proxy dla next serwer\n\n\t\t# Ważne jest, aby wspomnieć, że musisz zmienić port\n\t\t# dla aplikacji na porcie aplikacja używa po uruchomieniu\n\t\t# po buildzie.\n\t\tproxy_pass http://localhost:8080;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection 'upgrade';\n\t\tproxy_set_header Host $host;\n\t\tproxy_cache_bypass $http_upgrade;\n\n\t\t# musimy usunąć tę obsługę 404\n\t\t# bo next _next folder ma to\n\t\t# try_files $uri $uri/ =404;\n\t}\n\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      "p38": "Uruchom ponownie usługę nginx i jedyne, co musimy zrobić, to skonfigurować naszą aplikację jako demona za pomocą pm2 process manager:",
      "p39": {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo service nginx restart"
      },
      "p40": {
        "type": "title",
        "content": "Konfiguracja aplikacji przy użyciu pm2"
      },
      "p41": "PM2 jest menedżerem procesu produkcyjnego dla Node.aplikacje js. Jest przeznaczony do utrzymania Node.js aplikacji działają i mogą odzyskać po nieoczekiwanych błędach lub awariach. PM2 zapewnia takie funkcje, jak automatyczny restart, Automatyczne zarządzanie dziennikami i monitorowanie procesów.",
      "p42": "PM2 ułatwia uruchomienie Node.js w tle jako demon, bez martwienia się o zakończenie lub ponowne uruchomienie procesu. Jest to szczególnie przydatne w przypadku długotrwałego Node.js, takie jak serwery internetowe lub pracownicy w tle, ponieważ zapewniają, że są zawsze dostępne i mogą odzyskać wszelkie problemy, które mogą się pojawić.",
      "p43": "Oprócz funkcji zarządzania procesami PM2 zapewnia również zaawansowane możliwości monitorowania procesów. Obejmuje to szczegółowe informacje o stanie i wydajności Node.js, takie jak użycie procesora i pamięci, a także możliwość zarządzania i sprawdzania plików dziennika.",
      "p44": "PM2 jest popularnym narzędziem do zarządzania Node.js aplikacje js w środowiskach produkcyjnych, ponieważ ułatwia utrzymanie uruchomionych aplikacji i dostarcza wielu informacji o ich stanie i wydajności. Czy używasz jednego Node.js lub wiele aplikacji w klastrze, PM2 jest doskonałym narzędziem do zarządzania i monitorowania aplikacji.",
      "p45": "Basically, here, we need to just build our application, install pm2 application globally and start the process of executed production build as a daemon in the background:",
      "p46": {
        "type": "code",
        "lang": "shell",
        "content": "$ npm run build # zbudować naszą aplikację do produkcji (npm build script: next build)\n$ npm i -g pm2 # zainstaluj pm2, aby następna aplikacja działała wiecznie*\n$ pm2 start npm --name \"next\" -- start # start next app (npm start script: next start)\n"
      },
      "p47": "Ciesz się aplikacją w trybie produkcyjnym i bezpiecznym połączeniem HTTPS! Poniżej znajdziesz również kilka posłów i mały przewodnik, jak zarządzać swoją aplikacją za pomocą tego menedżera procesów.",
      "p48": {
        "type": "title",
        "content": "Wnioski i ściągawka"
      },
      "p49": "Było dość łatwe, co? To najłatwiejszy sposób na skonfigurowanie, wdrożenie i zabezpieczenie aplikacji Next.js przy użyciu Nginx. Ale może masz pytanie typu: \"Dobra, w porządku, ale co z potokiem CI/CD?\". Cóż, to jest po twojej stronie. Możesz go skonfigurować za pomocą GitHub Actions lub Jenkins lub dowolnego preferowanego narzędzia potokowego CI/CD. Ale jeśli chcesz wiedzieć, jak możesz przeprowadzić wdrożenie ręcznie, proszę bardzo.",
      "p50": "Pierwszą rzeczą, którą musisz zrobić, to przejść do swojego serwera i przejść do folderu z projektem. Tam pociągnij gałąź master (main) lub inną gałąź, której używasz w trybie produkcyjnym, zainstaluj wszystkie pakiety, zbuduj projekt (używając npm w tym konkretnym przykładzie) i zrestartuj proces pm2:",
      "p51": {
        "type": "code",
        "lang": "shell",
        "content": "$ git pull origin master\n$ npm i\n$ npm run build\n$ pm2 restart blog"
      },
      "p52": "Nawiasem mówiąc, myślę, że chcesz zmienić nazwę aplikacji na coś bardziej czytelnego dla człowieka. Oto jak możesz to zrobić. Najpierw wpisz to polecenie, aby uzyskać listę wszystkich procesów obsługiwanych przez pm2:",
      "p53": {
        "type": "code",
        "lang": "shell",
        "content": "$ pm2 list"
      },
      "p54": "W rezultacie zobaczysz ładnie wyglądającą tabelę, spójrz na kolumnę id, w tym momencie, jak sądzę, zobaczysz wartość 0, ale jeśli nie, po prostu zamień ją na swoją wartość i wpisz obok, aby zmienić nazwę proces:",
      "p55": {
        "type": "code",
        "lang": "shell",
        "content": "$ pm2 restart 0 --name \"new-name\""
      },
      "p56": "Jesteś niesamowity! Ściągawka specjalnie dla Ciebie:",
      "p57": {
        "type": "code",
        "lang": "bash",
        "content": "# Zaktualizuj i zaktualizuj wszystkie pakiety oraz zainstaluj wymagane programy\n$ sudo apt update && sudo apt upgrade\n$ sudo apt install nginx letsencrypt"
      },
      "p58": {
        "type": "code",
        "lang": "bash",
        "content": "# Włącz także nginx w ufw\n$ sudo ufw allow 'Nginx Full'"
      },
      "p59": {
        "type": "code",
        "lang": "bash",
        "content": "# Wklej następną zawartość do pliku sites-available/default i przetestuj serwer\n$ sudo vim /etc/nginx/sites-available/default"
      },
      "p60": {
        "type": "code",
        "lang": "nginx",
        "content": "# Zastąp *q nazwą swojej domeny\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n\troot /var/www/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\n\tserver_name q*;\n\n\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t}\n\n\t# letsencrypt\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      "p61": {
        "type": "code",
        "lang": "bash",
        "content": "# Sprawdź, czy nie wystąpił błąd składni i zrestartuj serwer\n$ sudo nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n$ sudo systemctl restart nginx"
      },
      "p62": {
        "type": "code",
        "lang": "bash",
        "content": "# Wygeneruj certyfikat TLS (zastąp *q nazwą swojej domeny)\n$ sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d *q"
      },
      "p63": {
        "type": "code",
        "lang": "bash",
        "content": "# Wygeneruj parametry Diffie-Hellmana (DH)\n$ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
      },
      "p64": {
        "type": "code",
        "lang": "bash",
        "content": "# Zabezpiecz nasz serwer Nginx wklejając następną zawartość do pliku konfiguracyjnego\n$ sudo vim /etc/nginx/snippets/ssl-params.conf"
      },
      "p65": {
        "type": "code",
        "lang": "bash",
        "content": "ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\nssl_ecdh_curvesecp384r1;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\n\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n\nadd_header Strict-Transport-Security \"max-age=63072000;includeSubdomains\";\nadd_header X-Frame-Options DENY;\nadd_headerX-Content-Type-Options nosniff;\n\nssl_dhparam /etc/ssl/certs/dhparam.pem;"
      },
      "p66": {
        "type": "code",
        "lang": "bash",
        "content": "# Wklej następną konfigurację do pliku\n# Pamiętaj o porcie localhost i zamianie *q na nazwę domeny\n$ sudo vim /etc/nginx/sites-available/default"
      },
      "p67": {
        "type": "code",
        "lang": "nginx",
        "content": "# redirect z http na https\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\tserver_name *q;\n\treturn 301 https://$server_name$request_uri;\n}\n\nserver {\n\t# listen on *:443 -> ssl; instead of *:80\n\tlisten 443 ssl http2 default_server;\n\tlisten [::]:443 ssl http2 default_server;\n\n\tserver_name q*;\n\n\tssl_certificate /etc/letsencrypt/live/*q/fullchain.pem;\n\tssl_certificate_key /etc/letsencrypt/live/*q/privkey.pem;\n\tinclude snippets/ssl-params.conf;\n\n\tlocation / {\n\t\t# reverse proxy dla next serwer\n\n\t\t# Ważne jest, aby wspomnieć, że musisz zmienić port\n\t\t# dla aplikacji na porcie aplikacja używa po uruchomieniu\n\t\t# po buildzie.\n\t\tproxy_pass http://localhost:8080;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection 'upgrade';\n\t\tproxy_set_header Host $host;\n\t\tproxy_cache_bypass $http_upgrade;\n\n\t\t# musimy usunąć tę obsługę 404\n\t\t# bo next _next folder ma to\n\t\t# try_files $uri $uri/ =404;\n\t}\n\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      "p68": {
        "type": "code",
        "lang": "bash",
        "content": "# Uruchom ponownie usługę\n$ sudo service nginx restart"
      },
      "p69": {
        "type": "code",
        "lang": "shell",
        "content": "# Zbuduj i uruchom aplikację\n$ npm run build # build our app for production (npm build script: next build)\n$ npm i -g pm2 # zainstaluj pm2, aby następna aplikacja działała wiecznie*\n$ pm2 start npm --name \"next\" -- start # start next app (npm start script: next start)\n"
      },
      "p70": {
        "type": "title",
        "content": "Kontakt i referencje"
      }
    },
    "references": [{
      "name": "Oryginalny GitHub gist",
      "link": "https://gist.github.com/jjsquady/5399d6e1b23f501083a9c262d806e248"
    }]
  },
  "everything-you-need-to-know-about-hardening": {
    "title": "Wszystko, co musisz wiedzieć o hardeningu",
    "tags": "",
    "description": "",
    "pageDescription": "Hardening instancji odnosi się do procesu zabezpieczenia instancji, która jest pojedynczym występowaniem maszyny wirtualnej lub fizycznej, która prowadzi system operacyjny oraz aplikacje lub usługi hostingowe. Celem hardeningu instancji jest zminimalizowanie ryzyka nieautoryzowanego dostępu do instancji, ochrona danych i aplikacji hostowanych na niej oraz zapobieganie kompromisowi systemu.",
    "intro": "",
    "timestamp": "",
    "footer": "",
    "toc": {
      "intro": "Introduction"
    },
    "content": {}
  },
  "pki-infrastructure-or-how-to-build-your-own-vpn": {
    "title": "Infrastruktura PKI, czyli jak zbudować własny VPN",
    "tags": "",
    "description": "",
    "pageDescription": "Czy kiedykolwiek myślałeś o tym, jak działa VPN? Myślę, że ta technologia stała się tak dużą częścią nowoczesnego biznesu i całej jej infrastruktury, której nawet o tym nie myślimy. I byłoby tego warte! Dzisiaj omówimy, w jaki sposób możemy zbudować naszą infrastrukturę VPN i ogólnie dowiemy się, jak to wszystko działa.",
    "intro": "",
    "timestamp": "",
    "footer": "",
    "toc": {
      "intro": "Introduction"
    },
    "content": {}
  }
}
