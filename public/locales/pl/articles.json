{
  "nextjs-nginx-deployment": {
    "title": "NextJS Nginx Deployment",
    "tags": "nextjs,nginx,deployment,mikhail,bahdashych,mikhail bahdashych,blog",
    "description": "NextJS Nginx deployment process",
    "pageDescription": "Proces wdrażania jest zawsze dość stresujący, zwłaszcza jeśli jesteś programistą i nie jesteś zaznajomiony z tym, czym zajmuje się zespół DevOps. Oto najłatwiejsze rozwiązanie, jak wdrożyć aplikację Next.js przy użyciu Nginx i Let's encrypt do bezpiecznej komunikacji HTTPS. Twoja ściągawka.",
    "intro": "O Boże, nie masz pojęcia, jak bałam się wszystkiego poza pisaniem kodu. Kiedyś myślałam, że to coś nierealnego i niebezpiecznego, ponieważ twój błąd może zniszczyć dosłownie wszystko, ale potem spróbowałam i ty wiesz, brzmi to o wiele bardziej przerażająco niż jest w rzeczywistości. Jedyne, co musisz zrobić, to zacząć od podstaw.",
    "timestamp": "2023-02-17",
    "footer": "To wszystko na dziś chłopaki. Dziękuję za przeczytanie, mam nadzieję, że było to pomocne i rozwiązało problem, na który natrafiłeś tutaj, szukając rozwiązania.",
    "toc": {
      "intro": "Introduction",
      "whyNginx": "Dlaczego Nginx?",
      "preps": "Przygotowania",
      "Konfiguracja HTTPS": {
        "certGen": "Generowanie certyfikatów",
        "nginxSec": "Konfiguracja zabezpieczeń Nginx"
      },
      "nginxConfig": "Konfiguracja Nginx",
      "appConfig": "Konfiguracja aplikacji przy użyciu pm2",
      "conclusion": "Wnioski i ściągawka",
      "references": "Kontakt i referencje"
    },
    "content": [
      {
        "type": "title",
        "content": "Introduction"
      },
      "Proces wdrażania aplikacji jest zawsze rodzajem stresu, zwłaszcza gdy jesteś programistą, który nie ma pojęcia, co robi personel DevOps (zaufaj mi, wiem o czym mówię). Dlatego jedyne, czego naprawdę chcesz, to jak najszybsze wdrożenie aplikacji w mniej lub bardziej bezpieczny sposób.",
       "Cóż, gratulacje, trafiłeś we właściwe miejsce! W tym artykule wyjaśnimy, jak możesz wdrożyć następny.aplikacja js wykorzystująca nginx w bezpieczny sposób i szyfrowanie HTTPS. Więc zacznijmy!",
      {
        "type": "title",
        "content": "Dlaczego Nginx?"
      },
      "Nginx (wymawiane 'engine-x') to wysokowydajny serwer WWW o otwartym kodzie źródłowym. Jest to odwrotny serwer proxy, co oznacza, że jest przeznaczony do przekazywania przychodzących żądań od klientów do innych serwerów w celu dalszego przetwarzania. Może to być przydatne w różnych sytuacjach, takich jak obsługa plików statycznych, proxy żądań do serwera zaplecza lub obsługa szyfrowania SSL.",
      "Nginx jest znany ze swojej stabilności, solidności i niskiego zużycia zasobów, co czyni go popularnym wyborem dla administratorów sieci i dostawców hostingu. Może obsługiwać dużą liczbę jednoczesnych połączeń, dzięki czemu doskonale nadaje się do witryn i aplikacji internetowych o dużym natężeniu ruchu. Posiada również szeroki zakres funkcji i opcji konfiguracyjnych, w tym równoważenie obciążenia, buforowanie i kontrolę dostępu.",
      "Oprócz wykorzystania jako serwer WWW, Nginx może być również używany jako odwrotny serwer proxy, moduł równoważenia obciążenia i pamięć podręczna HTTP. Ta wszechstronność w połączeniu z wydajnością i stabilnością sprawiła, że Nginx stał się popularnym wyborem wśród twórców stron internetowych i administratorów systemów.",
      "Ogólnie rzecz biorąc, Nginx to potężny i elastyczny serwer WWW, który doskonale nadaje się do szerokiej gamy aplikacji i przypadków użycia. Niezależnie od tego, czy obsługujesz prostą stronę internetową, uruchamiasz dużą aplikację internetową, czy cokolwiek pomiędzy, Nginx jest doskonałym wyborem dla Twoich potrzeb.",
      {
        "type": "title",
        "content": "Przygotowania"
      },
      "Nie będziemy dyskutować, jak i gdzie można uruchomić instancję i jak to wszysyko skonfigurować (AWS, DigitalOcean, Microsoft Azure lub jakikolwiek inny dostawca usług w chmurze). Przy okazji, możesz przeczytać o tym tutaj (LINK do Postu o instancjach HARDERING). Zamiast tego skupimy się na procesie instalacji Nginx, jako naszego serwera WWW, i Let's encrypt, jako naszego dostawcy CA, biorąc pod uwagę, że masz już instancję do wdrożenia.",
      "Za pomocą kolejnych 2 poleceń zaktualizujesz wszystkie pakiety na swoim komputerze i zainstalujesz wymagane nginx i Let's encrypt:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo apt update && sudo apt upgrade\n$ sudo apt install nginx letsencrypt"
      },
      "Włącz także nginx w ufw:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo ufw allow 'Nginx Full'"
      },
      "Ostatnim krokiem jest sprawdzenie, czy nasz serwer nginx działa poprawnie. Aby to zrobić, przejdź do <span class='code-block'>/etc/nginx/sites-available/default</span> i wklej następną zawartość (<span class='code-block'>*q</span> to nasza domena):",
      {
        "type": "code",
        "lang": "bash",
        "content": "$ sudo vim /etc/nginx/sites-available/default"
      },
      {
        "type": "code",
        "lang": "nginx",
        "content": "server {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n\troot /var/www/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\n\tserver_name q*;\n\n\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t}\n\n\t# letsencrypt\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      "Sprawdź błędy składniowe i uruchom ponownie nginx:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n$ sudo systemctl restart nginx"
      },
      {
        "type": "title",
        "content": "Konfiguracja HTTPS"
      },
      "Let's Encrypt to darmowy, otwarty i zautomatyzowany urząd certyfikacji (CA), który zapewnia cyfrowe certyfikaty do szyfrowania Transport Layer Security (TLS). Certyfikaty te służą do zabezpieczenia ruchu w sieci i zapewnienia bezpiecznego przesyłania poufnych informacji, takich jak hasła i numery kart kredytowych, przez internet.",
      "Głównym celem Let's Encrypt jest uczynienie szyfrowania bardziej dostępnym dla ogółu społeczeństwa poprzez oferowanie bezpłatnych i łatwych w użyciu certyfikatów. Przed Let's Encrypt uzyskanie certyfikatu może być skomplikowanym i kosztownym procesem. Dzięki Let's Encrypt każdy może uzyskać certyfikat za pomocą zaledwie kilku kliknięć, umożliwiając zabezpieczenie strony internetowej lub aplikacji internetowej przy minimalnym wysiłku.",
      "Let's Encrypt wyróżnia się również automatycznym procesem wydawania i odnawiania certyfikatów. Oznacza to, że po uzyskaniu certyfikatu nie musisz się martwić o ręczne odnowienie go w przyszłości. Certyfikat odnowi się automatycznie, o ile domena pozostanie aktywna i będzie pod twoją kontrolą.",
      "Podsumowując, Let's Encrypt to przełomowy urząd certyfikacji, dzięki któremu szyfrowanie jest bardziej dostępne i przystępne dla każdego. Dzięki darmowym i łatwym w użyciu certyfikatom, zautomatyzowanemu procesowi odnawiania i zaangażowaniu w oprogramowanie open source, Let's Encrypt jest doskonałym wyborem dla każdego, kto chce zabezpieczyć swoją stronę internetową lub aplikację internetową.",
      {
        "type": "subtitle",
        "content": "Generowanie certyfikatów"
      },
      "Czas wygenerować certyfikaty TLS. W tym przykładzie użyjemy Let's Encrypt, ale możesz użyć dowolnego innego dostawcy CA, którego chcesz. Jak wspomniano wcześniej, zastąp <span class= 'code-block'>*q</span> nazwą domeny:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d *q"
      },
      "Następne polecenie wygeneruje parametry DH. Te parametry określają sposób, w jaki OpenSSL wykonuje wymianę kluczy Diffie-Hellman (DH). Zasadniczo dodatkowa warstwa bezpieczeństwa dla połączenia HTTPS:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
      },
      {
        "type": "subtitle",
        "content": "Konfiguracja zabezpieczeń Nginx"
      },
      "Musimy zabezpieczyć nasz serwer Nginx, umieszczając następną konfigurację do ssl-params.conf. Korzystając z ulubionego edytora tekstu (vim tutaj) skopiuj i wklej następną zawartość:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo vim /etc/nginx/snippets/ssl-params.conf"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\nssl_ecdh_curvesecp384r1;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\n\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n\nadd_header Strict-Transport-Security \"max-age=63072000;includeSubdomains\";\nadd_header X-Frame-Options DENY;\nadd_headerX-Content-Type-Options nosniff;\n\nssl_dhparam /etc/ssl/certs/dhparam.pem;"
      },
      {
        "type": "title",
        "content": "Konfiguracja Nginx"
      },
      "Prawie skończyliśmy z konfiguracją. 2 ostatnie rzeczy, które musimy zrobić, to skonfigurować serwer Nginx jako odwrotny serwer proxy i uruchomić aplikację.",
      "Zacznijmy od konfiguracji Nginx jako odwrotnego serwera proxy. Zasadniczo musimy tutaj edytować plik nginx i wkleić następną zawartość (pamiętaj, <span class='code-block'>*q</span> jest dla Twojej nazwy domeny):",
      {
        "type": "code",
        "lang": "bash",
        "content": "$ sudo vim /etc/nginx/sites-available/default"
      },
      {
        "type": "code",
        "lang": "nginx",
        "content": "# redirect z http na https\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\tserver_name *q;\n\treturn 301 https://$server_name$request_uri;\n}\n\nserver {\n\t# listen on *:443 -> ssl; instead of *:80\n\tlisten 443 ssl http2 default_server;\n\tlisten [::]:443 ssl http2 default_server;\n\n\tserver_name q*;\n\n\tssl_certificate /etc/letsencrypt/live/*q/fullchain.pem;\n\tssl_certificate_key /etc/letsencrypt/live/*q/privkey.pem;\n\tinclude snippets/ssl-params.conf;\n\n\tlocation / {\n\t\t# reverse proxy dla next serwer\n\n\t\t# Ważne jest, aby wspomnieć, że musisz zmienić port\n\t\t# dla aplikacji na porcie aplikacja używa po uruchomieniu\n\t\t# po buildzie.\n\t\tproxy_pass http://localhost:8080;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection 'upgrade';\n\t\tproxy_set_header Host $host;\n\t\tproxy_cache_bypass $http_upgrade;\n\n\t\t# musimy usunąć tę obsługę 404\n\t\t# bo next _next folder ma to\n\t\t# try_files $uri $uri/ =404;\n\t}\n\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      "Uruchom ponownie usługę nginx i jedyne, co musimy zrobić, to skonfigurować naszą aplikację jako demona za pomocą pm2 process manager:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ sudo service nginx restart"
      },
      {
        "type": "title",
        "content": "Konfiguracja aplikacji przy użyciu pm2"
      },
      "PM2 jest menedżerem procesu produkcyjnego dla Node.aplikacje js. Jest przeznaczony do utrzymania Node.js aplikacji działają i mogą odzyskać po nieoczekiwanych błędach lub awariach. PM2 zapewnia takie funkcje, jak automatyczny restart, Automatyczne zarządzanie dziennikami i monitorowanie procesów.",
      "PM2 ułatwia uruchomienie Node.js w tle jako demon, bez martwienia się o zakończenie lub ponowne uruchomienie procesu. Jest to szczególnie przydatne w przypadku długotrwałego Node.js, takie jak serwery internetowe lub pracownicy w tle, ponieważ zapewniają, że są zawsze dostępne i mogą odzyskać wszelkie problemy, które mogą się pojawić.",
      "Oprócz funkcji zarządzania procesami PM2 zapewnia również zaawansowane możliwości monitorowania procesów. Obejmuje to szczegółowe informacje o stanie i wydajności Node.js, takie jak użycie procesora i pamięci, a także możliwość zarządzania i sprawdzania plików dziennika.",
      "PM2 jest popularnym narzędziem do zarządzania Node.js aplikacje js w środowiskach produkcyjnych, ponieważ ułatwia utrzymanie uruchomionych aplikacji i dostarcza wielu informacji o ich stanie i wydajności. Czy używasz jednego Node.js lub wiele aplikacji w klastrze, PM2 jest doskonałym narzędziem do zarządzania i monitorowania aplikacji.",
      "Basically, here, we need to just build our application, install pm2 application globally and start the process of executed production build as a daemon in the background:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ npm run build # zbudować naszą aplikację do produkcji (npm build script: next build)\n$ npm i -g pm2 # zainstaluj pm2, aby następna aplikacja działała wiecznie*\n$ pm2 start npm --name \"next\" -- start # start next app (npm start script: next start)\n"
      },
      "Ciesz się aplikacją w trybie produkcyjnym i bezpiecznym połączeniem HTTPS! Poniżej znajdziesz również kilka posłów i mały przewodnik, jak zarządzać swoją aplikacją za pomocą tego menedżera procesów.",
      {
        "type": "title",
        "content": "Wnioski i ściągawka"
      },
      "Było dość łatwe, co? To najłatwiejszy sposób na skonfigurowanie, wdrożenie i zabezpieczenie aplikacji Next.js przy użyciu Nginx. Ale może masz pytanie typu: \"Dobra, w porządku, ale co z potokiem CI/CD?\". Cóż, to jest po twojej stronie. Możesz go skonfigurować za pomocą GitHub Actions lub Jenkins lub dowolnego preferowanego narzędzia potokowego CI/CD. Ale jeśli chcesz wiedzieć, jak możesz przeprowadzić wdrożenie ręcznie, proszę bardzo.",
      "Pierwszą rzeczą, którą musisz zrobić, to przejść do swojego serwera i przejść do folderu z projektem. Tam pociągnij gałąź master (main) lub inną gałąź, której używasz w trybie produkcyjnym, zainstaluj wszystkie pakiety, zbuduj projekt (używając npm w tym konkretnym przykładzie) i zrestartuj proces pm2:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ git pull origin master\n$ npm i\n$ npm run build\n$ pm2 restart blog"
      },
      "Nawiasem mówiąc, myślę, że chcesz zmienić nazwę aplikacji na coś bardziej czytelnego dla człowieka. Oto jak możesz to zrobić. Najpierw wpisz to polecenie, aby uzyskać listę wszystkich procesów obsługiwanych przez pm2:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ pm2 list"
      },
      "W rezultacie zobaczysz ładnie wyglądającą tabelę, spójrz na kolumnę id, w tym momencie, jak sądzę, zobaczysz wartość 0, ale jeśli nie, po prostu zamień ją na swoją wartość i wpisz obok, aby zmienić nazwę proces:",
      {
        "type": "code",
        "lang": "shell",
        "content": "$ pm2 restart 0 --name \"new-name\""
      },
      "Jesteś niesamowity! Ściągawka specjalnie dla Ciebie:",
      {
        "type": "code",
        "lang": "bash",
        "content": "# Zaktualizuj i zaktualizuj wszystkie pakiety oraz zainstaluj wymagane programy\n$ sudo apt update && sudo apt upgrade\n$ sudo apt install nginx letsencrypt"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Włącz także nginx w ufw\n$ sudo ufw allow 'Nginx Full'"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Wklej następną zawartość do pliku sites-available/default i przetestuj serwer\n$ sudo vim /etc/nginx/sites-available/default"
      },
      {
        "type": "code",
        "lang": "nginx",
        "content": "# Zastąp *q nazwą swojej domeny\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n\troot /var/www/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\n\tserver_name q*;\n\n\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t}\n\n\t# letsencrypt\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Sprawdź, czy nie wystąpił błąd składni i zrestartuj serwer\n$ sudo nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n$ sudo systemctl restart nginx"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Wygeneruj certyfikat TLS (zastąp *q nazwą swojej domeny)\n$ sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d *q"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Wygeneruj parametry Diffie-Hellmana (DH)\n$ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Zabezpiecz nasz serwer Nginx wklejając następną zawartość do pliku konfiguracyjnego\n$ sudo vim /etc/nginx/snippets/ssl-params.conf"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\nssl_ecdh_curvesecp384r1;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\n\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n\nadd_header Strict-Transport-Security \"max-age=63072000;includeSubdomains\";\nadd_header X-Frame-Options DENY;\nadd_headerX-Content-Type-Options nosniff;\n\nssl_dhparam /etc/ssl/certs/dhparam.pem;"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Wklej następną konfigurację do pliku\n# Pamiętaj o porcie localhost i zamianie *q na nazwę domeny\n$ sudo vim /etc/nginx/sites-available/default"
      },
      {
        "type": "code",
        "lang": "nginx",
        "content": "# redirect z http na https\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\tserver_name *q;\n\treturn 301 https://$server_name$request_uri;\n}\n\nserver {\n\t# listen on *:443 -> ssl; instead of *:80\n\tlisten 443 ssl http2 default_server;\n\tlisten [::]:443 ssl http2 default_server;\n\n\tserver_name q*;\n\n\tssl_certificate /etc/letsencrypt/live/*q/fullchain.pem;\n\tssl_certificate_key /etc/letsencrypt/live/*q/privkey.pem;\n\tinclude snippets/ssl-params.conf;\n\n\tlocation / {\n\t\t# reverse proxy dla next serwer\n\n\t\t# Ważne jest, aby wspomnieć, że musisz zmienić port\n\t\t# dla aplikacji na porcie aplikacja używa po uruchomieniu\n\t\t# po buildzie.\n\t\tproxy_pass http://localhost:8080;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection 'upgrade';\n\t\tproxy_set_header Host $host;\n\t\tproxy_cache_bypass $http_upgrade;\n\n\t\t# musimy usunąć tę obsługę 404\n\t\t# bo next _next folder ma to\n\t\t# try_files $uri $uri/ =404;\n\t}\n\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n}"
      },
      {
        "type": "code",
        "lang": "bash",
        "content": "# Uruchom ponownie usługę\n$ sudo service nginx restart"
      },
      {
        "type": "code",
        "lang": "shell",
        "content": "# Zbuduj i uruchom aplikację\n$ npm run build # build our app for production (npm build script: next build)\n$ npm i -g pm2 # zainstaluj pm2, aby następna aplikacja działała wiecznie*\n$ pm2 start npm --name \"next\" -- start # start next app (npm start script: next start)\n"
      },
      {
        "type": "title",
        "content": "Kontakt i referencje"
      }
    ],
    "references": [{
      "name": "Oryginalny GitHub gist",
      "link": "https://gist.github.com/jjsquady/5399d6e1b23f501083a9c262d806e248"
    }]
  },
  "everything-you-need-to-know-about-hardening": {
    "title": "Wszystko, co musisz wiedzieć o hardeningu",
    "tags": "",
    "description": "",
    "pageDescription": "Hardening instancji odnosi się do procesu zabezpieczenia instancji, która jest pojedynczym występowaniem maszyny wirtualnej lub fizycznej, która prowadzi system operacyjny oraz aplikacje lub usługi hostingowe. Celem hardeningu instancji jest zminimalizowanie ryzyka nieautoryzowanego dostępu do instancji, ochrona danych i aplikacji hostowanych na niej oraz zapobieganie kompromisowi systemu.",
    "intro": "",
    "timestamp": "",
    "footer": "",
    "toc": {
      "intro": "Introduction"
    },
    "content": {}
  },
  "pki-infrastructure-or-how-to-build-your-own-vpn": {
    "title": "Infrastruktura PKI, czyli jak zbudować własny VPN",
    "tags": "",
    "description": "",
    "pageDescription": "Czy kiedykolwiek myślałeś o tym, jak działa VPN? Myślę, że ta technologia stała się tak dużą częścią nowoczesnego biznesu i całej jej infrastruktury, której nawet o tym nie myślimy. I byłoby tego warte! Dzisiaj omówimy, w jaki sposób możemy zbudować naszą infrastrukturę VPN i ogólnie dowiemy się, jak to wszystko działa.",
    "intro": "",
    "timestamp": "",
    "footer": "",
    "toc": {
      "intro": "Introduction"
    },
    "content": {}
  },
  "how-does-dns-work-and-why-we-need-dnssec": {
    "title": "Jak działa DNS i dlaczego potrzebujemy DNSSEC",
    "tags": "mikhail,bahdashych,mikhail bahdashych,blog,dns,dnssec",
    "description": "Słyszałeś kiedyś o DNS? Założę się, że tak! Założę się również, że jeśli próbowałeś dowiedzieć się, o co w tym wszystkim chodzi, widziałeś DNSSEC. Cóż... czas dowiedzieć się, jak głęboka jest ta królicza nora...",
    "pageDescription": "Chyba wszyscy słyszeliście o DNS. To jest internetowa książka telefoniczna, która konwertuje czytelne dla człowieka nazwy domen na adresy IP przetwarzane przez maszyny i bla-bla-bla. Szczerze mówiąc, to dosłownie królicza nora i postanowiłem dowiedzieć się, jak głęboka jest. Cóż, zaufaj mi, będziesz zaskoczony, a ja mam cholernie ciekawe rzeczy do podzielenia się z tobą. Więc zanurzmy się w to!",
    "intro": "Królicza dziura — to chyba najlepszy opis DNS, jaki znalazłem. Byłem wystarczająco naiwny, by sądzić, że jedyne, co robi, to konwertowanie nazw domen na adresy IP, aby zapewnić, że nazwy czytelne dla człowieka są zrozumiałe dla maszyn. Nie mam pojęcia, jak bardzo się myliłem, myśląc w ten sposób.",
    "timestamp": "2023-02-20",
    "footer": "Phew... To było trochę skomplikowane, prawda? Ale teraz wiesz, czym właściwie są DNS i DNSSEC i jak działają. Jeśli po przeczytaniu masz jeszcze więcej pytań niż wcześniej, gratuluję, od teraz będziesz mógł sam znaleźć wszystkie odpowiedzi, ale na razie to wszystko. Dziękuję bardzo za przeczytanie.",
    "toc": {
      "intro": "Wstęp",
      "Przegląd DNS": {
        "terminology": "Terminologia DNS",
        "resolutionFlow": "Przepływ rozpoznawania DNS",
        "Role serwerów DNS i pełne wyszukiwanie": {
          "stubResolver": "DNS Stub Resolver",
          "recursiveResolver": "Rekurencyjny mechanizm rozpoznawania nazw DNS",
          "rootNameserver": "Główny serwer nazw DNS",
          "tldNameserver": "Serwer nazw DNS TLD",
          "authNameserver": "Autorytatywny serwer nazw DNS",
          "rootNameserverVsRootServer": "DNS Root Nameserver vs DNS Root Server"
        },
        "Typy rekordów DNS": {
          "aRec": "A Rekord (address)",
          "quadA": "AAAA Rekord (quad A)",
          "mxRec": "MX Rekord (Mail eXchange)",
          "nsRec": "NS Rekord (nameserver)",
          "cnameRec": "CNAME Rekord (Canonical Name)",
          "anameRec": "ANAME Rekord",
          "txtRec": "TXT Rekord"
        }
      },
      "dnsSecIssues": "Problemy z bezpieczeństwem DNS",
      "Przegląd DNSSEC": {
        "terminology": "Terminologia DNSSEC",
        "resolutionFlow": "Przepływ rozpoznawania DNSSEC"
      },
      "dnssecSignCeremony": "Ceremonia podpisania roota DNSSEC",
      "O szyfrowaniu DNS": {
        "dot": "DNS over TLS",
        "doh": "DNS over HTTPS",
        "difference": "Różnica między DoT a DoH"
      },
      "conclusion": "Wnioski",
      "references": "Kontakt i referencje"
    },
    "content": [
      {
        "type": "title",
        "content": "Wstęp"
      },
      "W dzisiejszej erze cyfrowej system nazw domen (DNS) odgrywa istotną rolę w ułatwianiu komunikacji online i umożliwianiu użytkownikom dostępu do stron internetowych i usług w Internecie. Jednak wraz ze wzrostem liczby zagrożeń cyberbezpieczeństwa i złośliwych działań rośnie obawa o bezpieczeństwo DNS i potencjalne ryzyko z nim związane.",
      "W tym miejscu pojawia się DNS Security Extensions (DNSSEC), oferując potężne rozwiązanie wzmacniające bezpieczeństwo DNS i chroniące przed różnymi atakami, takimi jak fałszowanie DNS, zatrucie pamięci podręcznej i inne formy cyberzagrożeń.",
      "W tym poście na blogu przyjrzymy się bliżej, czym są DNS i DNSSEC, jak działają i dlaczego są niezbędne do utrzymania bezpiecznej i niezawodnej infrastruktury internetowej. Zbadamy również niektóre rzeczywiste przypadki użycia i omówimy korzyści i ograniczenia DNSSEC. Jeśli więc chcesz dowiedzieć się więcej o DNS i DNSSEC oraz o tym, jak mogą one pomóc w zabezpieczeniu twojej obecności w Internecie, czytaj dalej!",
      {
        "type": "title",
        "content": "Przegląd DNS"
      },
      "Tak samo jak zawsze zacznijmy od krótkiego opisu czym właściwie jest DNS i jak można go opisać. Najpopularniejsza definicja DNS zawsze brzmi mniej więcej tak:",
      {
        "type": "list-bullet",
        "items": [
          "<b> DNS (Domain Name System)</b> — system, który tłumaczy czytelne dla człowieka nazwy domen na adres IP, dzięki czemu maszyny mogą komunikować się ze sobą za pomocą tych adresów IP."
        ]
      },
      "Brzmi łatwo, prawda? Chciałem spróbować zagłębić się trochę głębiej, aby dowiedzieć się, co się stanie po wpisaniu adresu URL w przeglądarce i naciśnięciu przycisku Enter. Chciałem wiedzieć, co dzieje się za kulisami i jak Twój komputer uzyskuje adres IP źródłowego serwera www.",
      {
        "type": "subtitle",
        "content": "Terminologia DNS"
      },
      "Ale zanim zaczniemy, zdefiniujmy terminologię, której będziemy używać przez całą naszą długą podróż. Możesz do nich wrócić, kiedy tylko tego potrzebujesz:",
      {
        "type": "list-bullet",
        "items": [
          "<b>Domena DNS/Strefa DNS</b> — sekcja przestrzeni nazw DNS. Na przykład: blog.mikhailbahdashych.me. (kropka końcowa nie jest literówką) to serwer o nazwie \"blog\" w domenie/strefie\" mikhailbahdashych\", który znajduje się w domenie/strefie \".me\", która znajduje się w \"root (.)\" domenie/strefie.",
          "<b>Iteracyjne zapytanie DNS</b> — żądanie do serwera DNS: \"Daj mi wszelką pomoc, ale nie pytaj nikogo innego\".",
          "<b>Rekurencyjne zapytanie DNS</b> — żądanie do serwera DNS: \"Daj mi to, czego potrzebuję i zapytaj wszystkich, których chcesz\".",
          "<b>Serwer DNS</b> — termin opisujący całą infrastrukturę ról DNS. W porządku, jeśli w tym momencie tego nie rozumiesz, wyjaśnimy to.",
          "<b>Zapytanie DNS lub żądanie</b> — żądanie rozdzielczości nazwy domeny na adres IP."
        ]
      },
      {
        "type": "subtitle",
        "content": "Przepływ rozpoznawania DNS"
      },
      "Pierwszą rzeczą, o której musimy wiedzieć, jest: w jaki sposób twoja przeglądarka wysyła tekst w postaci adresu URL i odzyskuje adres IP żądanej witryny? W tej chwili omawiamy DNS tylko z perspektywy, że jedyne, co robi, to konwersja adresów URL na adres IP stron internetowych, ale nieco później rozszerzymy jego użycie.",
      "Tutaj w grę wchodzi <b>przepływ rozdzielczości DNS</b>. Wszystko jest lepsze na przykładach, więc powiedzmy, że chcesz poprosić o <b>cloudflare.com. (kropka końcowa nie jest literówką)</b>. Przede wszystkim pozwólcie, że przedstawię wam sekwencję wszystkich żądań, cały sam przepływ rozdzielczości, a następnie omówimy jego części krok po kroku:",
      {
        "type": "list-numeric",
        "items": [
          "Klient wysyła rekurencyjne zapytanie do swojego lokalnego rekurencyjnego buforującego serwera DNS dla adresu IP <b>\"cloudflare.com\"</b>.",
          "Rekurencyjny buforujący serwer DNS wysyła iteracyjne zapytanie do katalogu głównego (<b>\".\"</b>) serwer nazw dla adresu IP <b>\"cloudflare.com\"</b>.",
          "Główny serwer nazw odpowiada skierowaniem do serwera nazw TLD strefy <b>\".com\"</b>.",
          "Rekurencyjny buforujący serwer DNS wysyła iteracyjne zapytanie do <b>\".com\"</b> serwer nazw TLD dla adresu IP <b>\"cloudflare.com\"</b>.",
          "Serwer nazw TLD <B>\".com\"</B> odpowiada skierowaniem do autorytatywnego serwera nazw strefy <B>\"cloudflare\"</B>.",
          "Rekurencyjny buforujący serwer DNS wysyła iteracyjne zapytanie do <b>\"cloudflare\"</b> autorytatywnego serwera nazw dla adresu IP <b>\"cloudflare.com\"</b>.",
          "<b>\"cloudflare\"</b> autorytatywny serwer nazw odpowiada adresem IP dla <b>\"cloudflare.com\"</b>.",
          "Rekurencyjny buforujący serwer DNS odpowiada oryginalnemu klientowi adresem IP <b>\"cloudflare.com\" </b> (i buforuje go, jeśli nie ma tego rekordu).",
          "Klient wchodzi w interakcję z serwerem WWW <b>\"cloudflare.com\"</b>."
        ]
      },
      {
        "type": "picture",
        "width": "w80",
        "resource": "dns_record_request_sequence_recursive_resolver.png"
      },
      "Dobra, mądralo, ale o subdomenach, jak na przykład <b>\"blog.cloudflare.com\"</b>? Nic wielkiego, Sekwencja zostanie rozwinięta dla jeszcze jednego autorytatywnego serwera nazw, który przechowuje adres IP tej subdomeny.",
      {
        "type": "picture",
        "width": "w80",
        "resource": "dns_record_request_sequence_cname_subdomain.png"
      },
      "Widzę, że masz dużo pytań. Okej, Podzielmy tę sekwencję wyjaśnieniami krok po kroku różnych typów serwerów nazw. Nadszedł czas, aby dowiedzieć się wszystkiego o rolach <b>serwerów DNS i zakończyć wyszukiwanie</b>.",
      {
        "type": "subtitle",
        "content": "Role serwerów DNS i pełne wyszukiwanie"
      },
      "Pierwszą rzeczą, którą musisz zrozumieć, jest to, że wszystkie te serwery nazw, takie jak root, TLD i bla-bla-bla, to tylko role. Dosłownie może to być tylko jedna fizyczna maszyna (wirtualna lub Nie), która jest odpowiedzialna za obsługę prawie każdego kroku opisanej powyżej sekwencji. Poza tym chyba już zauważyłeś, że istnieje jakaś <b>hierarchia</b> serwerów DNS i to prawda. Wszystkie role DNS są miejscami w hierarchii, która idzie w górę od dołu.",
      "Nawiasem mówiąc, <b>rozważmy, że nie ma buforowania na każdym kroku sekwencji</b>. Powinieneś wiedzieć, że <b>buforowanie</b> jest prawdopodobnie jedną z najważniejszych funkcji całego DNS. Chcemy składać jak najmniej wniosków, aby utrzymać wysoką wydajność systemu. Buforowanie odbywa się dosłownie na każdym etapie przepływu rozdzielczości DNS.",
      "Zaktualizujmy też trochę naszą sekwencję i pozwólcie, że przedstawię cały <b>przepływ wyszukiwania DNS</b>. Pamiętaj tylko o tym obrazie i wróć do niego po przeczytaniu o każdej roli, aby ukończyć ten obraz w głowie i zrozumieć każdy krok i rolę wyszukiwania DNS.",
      {
        "type": "picture",
        "width": "w100",
        "resource": "what_is_a_dns_server_dns_lookup.png"
      },
      "Tak więc pierwszą rzeczą, którą spełnia Twoje zapytanie DNS, jest <b>DNS Stub Resolver</b>.",
      {
        "type": "subsubtitle",
        "content": "DNS Stub Resolver"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>DNS Stub Resolver</b> — jest składnikiem pośrednim pomiędzy aplikacją, która wymaga rozpoznawania DNS i rekurencyjnego rozpoznawania DNS. Resolver odcinkowy DNS jest zwykle używany przez urządzenia użytkowników końcowych, takie jak laptopy, smartfony i inne urządzenia sieciowe, do wyszukiwania nazw domen witryn internetowych i innych usług online."
        ]
      },
      "Resolver DNS na poziomie systemu operacyjnego jest drugim i ostatnim przystankiem lokalnym, zanim zapytanie DNS opuści komputer. Proces w systemie operacyjnym, który jest przeznaczony do obsługi tego zapytania, jest powszechnie nazywany <b>\"stub resolver\"</b> lub <b>klient DNS</b>. Gdy resolver pośredni otrzymuje żądanie z aplikacji, najpierw sprawdza własną pamięć podręczną, aby sprawdzić, czy ma rekord. Jeśli tak się nie stanie, wysyła zapytanie DNS (z ustawioną flagą rekurencyjną) poza siecią lokalną do rekurencyjnego resolwera DNS wewnątrz dostawcy usług internetowych (ISP).",
      "Myślę, że masz uwagi, że na zdjęciach nie ma resolwera odcinka, ale to w porządku. Jest to krok między Klientem a rekurencyjnym resolwerem DNS. Zasadniczo jest to krok, w którym klient sprawdza, czy ma już buforowany adres IP żądanej nazwy domeny. Ponadto, dla lepszego zrozumienia, zaznaczmy wszystkie kroki, w których zaangażowana jest ta rola. Powiedzmy, że jest to <b>krok 0</b>.",
      {
        "type": "subsubtitle",
        "content": "Rekurencyjny mechanizm rozpoznawania nazw DNS"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Rekurencyjny Resolver DNS</b> — rekurencyjny resolver jest komponentem odpowiedzialnym za odpowiedzi na rekurencyjne żądanie klienta i poświęcenie czasu na wyśledzenie rekordu DNS (Zwykle 24 godziny). Wykonuje zadanie rozwiązywania zapytań DNS poprzez rekurencyjne przechodzenie przez hierarchię DNS. Gdy rekurencyjny resolver otrzyma zapytanie DNS od klienta, wyśle zapytanie do innych serwerów DNS w imieniu klienta, aby rozwiązać nazwę domeny na adres IP."
        ]
      },
      "<b>Rekurencyjny Resolver DNS jest łącznikiem całego przepływu.</b>",
      "Jedną z kluczowych zalet korzystania z rekurencyjnego resolwera jest to, że może on <b>buforować</b> rekordy DNS w celu poprawy wydajności kolejnych zapytań DNS. Dlatego też będzie odnosić się do niego jako <b>serwer buforowania DNS</b>. Gdy rekurencyjny resolver otrzyma odpowiedź DNS, będzie przechowywał odpowiedź w swojej pamięci podręcznej przez pewien czas (znany jako time-To-live lub TTL), aby mógł szybko odpowiedzieć na przyszłe zapytania dotyczące tej samej nazwy domeny. Może to pomóc zmniejszyć obciążenie systemu DNS i poprawić wydajność wyszukiwań DNS.",
      "Tutaj wszystko się zaczyna. Klient (użytkownik końcowy) wysyła rekurencyjne zapytanie do swojego lokalnego rekurencyjnego buforowania serwera DNS dla <b>cloudflare.com</b>. to jest <b>Krok 1</b>",
      {
        "type": "subsubtitle",
        "content": "Główny serwer nazw DNS"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>DNS Root Nameserver</b> — główny serwer nazw <b>(DNS Root Nameserver ≠ DNS Root Server!!! Omówimy to później)</b> jest pierwszym krokiem w tłumaczeniu (rozwiązywaniu) czytelnych dla człowieka nazw hostów na adresy IP. Pamiętasz tę kropkę w nazwie domeny, to nie była literówka? Tutaj w grę wchodzi root nameserver."
        ]
      },
      "Rekurencyjny serwer buforowania wysyła iteracyjne zapytanie do katalogu głównego <b>\".\"</b> serwer nazw dla <b>\"cloudflare.com\"</b> - <b>Krok 2</b>. Główny serwer nazw odpowiada skierowaniem do serwera nazw strefy <b>\".com\"</b>. Ale co to jest <b>\".com\"</b>, oczywiście jest to domena najwyższego poziomu! Serwer główny odpowiada skierowaniem do serwerów nazw TLD strefy <b>\".com\"</b>.",
      {
        "type": "subsubtitle",
        "content": "Serwer nazw DNS TLD"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Serwer nazw DNS TLD</b> — TLD oznacza domenę najwyższego poziomu. Serwer nazw TLD przechowuje informacje dla wszystkich nazw domen, które mają wspólne rozszerzenie domeny, takich jak <b>\".com\"</b>, <b>\".net\"</b> lub cokolwiek pojawia się po ostatniej kropce w adresie URL. Na przykład serwer nazw TLD <b>\".com\"</b> zawiera informacje dla każdej witryny, która kończy się na <b>\".com \"</b>."
        ]
      },
      "Rekurencyjny buforujący serwer DNS wysyła iteracyjne zapytanie do <b>\".com\"</b> serwer dla cloudflare.com - <b>Krok 4</b>. Serwer nazw TLD odpowiada skierowaniem do autorytatywnego serwera nazw cloudflare zone- <b>Krok 5</b>.",
      {
        "type": "subsubtitle",
        "content": "Autorytatywny serwer nazw DNS"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>DNS autorytatywny serwer nazw</b> — ten ostateczny serwer nazw można traktować jako słownik na stojaku z książkami, w którym można przetłumaczyć określoną nazwę na jej definicję. Autorytatywny serwer nazw jest ostatnim przystankiem w zapytaniu serwera nazw. Jeśli autorytatywny serwer nazw ma dostęp do żądanego rekordu, zwróci adres IP żądanej nazwy hosta z powrotem do serwera DNS, który złożył wstępne żądanie."
        ]
      },
      "Rekurencyjny buforujący serwer DNS wysyła iteracyjne zapytanie do <b>\"cloudflare\"</b> serwer dla <b>\"cloudflare.com\"</b> — <b>Krok 6</b>. <b>\"cloudflare.com\"</b> autorytatywny serwer nazw odpowiada adresem IP dla <b>\"cloudflare.com\"</b> — <b>Krok 7</b>. Rekurencyjny buforujący serwer DNS odpowiada oryginalnemu klientowi adresem IP <b>\"cloudflare.com\"</b> - <b>Krok 8</b> — i klient wchodzi w interakcję z serwerem WWW <b>\"cloudflare.com\"</b> — <b>Kroki 9 i 10 </b>.",
      "Dobra robota, to wszystko o wyszukiwaniach DNS. Teraz wiesz, jak to działa i jakie komponenty są zaangażowane. Prawdopodobnie zauważyłeś, że istnieje wiele \"serwerów DNS\". Kiedy mówię \"serwer DNS\", dosłownie mam na myśli cały ten przepływ, ponieważ serwer DNS po prostu łączy się we wszystkich rolach.",
      {
        "type": "subsubtitle",
        "content": "DNS Root Nameserver vs DNS Root Server"
      },
      "Pamiętaj, że na zdjęciu zatytułowanym <b>kompletne wyszukiwanie DNS i Zapytanie o stronę internetową </b>. Na tym zdjęciu jest jeden wielki błąd. Widzisz, Krok 2 i 3 mówią o komunikacji z <b>głównym serwerem DNS </b>,ale w rzeczywistości jest to <b>główny serwer nazw DNS</b>. Niezwykle ważne jest, aby je różnić. Pozwól, że wyjaśnię różnicę:",
      {
        "type": "list-bullet",
        "items": [
          "<b>Serwery główne DNS</b> — to 13 autorytatywnych serwerów nazw, które są odpowiedzialne za odpowiadanie na zapytania dotyczące strefy głównej systemu nazw domen (DNS). Serwery te są obsługiwane przez różne organizacje na całym świecie i są identyfikowane literami od A Do M. są pierwszym krokiem w procesie rozwiązywania nazwy domeny na adres IP i pomagają skierować ruch do odpowiedniego serwera nazw domeny najwyższego poziomu (TLD).",
          "<b>DNS Root Nameservers</b> — zestaw serwerów nazw, które obsługują strefę główną DNS. Te serwery nazw są odpowiedzialne za dostarczanie skierowań do serwerów nazw TLD i innych autorytatywnych serwerów nazw i odgrywają kluczową rolę w funkcjonowaniu DNS. Termin \"główny serwer nazw\" jest często używany zamiennie z \"głównym serwerem\", ale ściśle mówiąc, ten pierwszy odnosi się konkretnie do serwerów nazw, które obsługują strefę główną."
        ]
      },
      {
        "type": "subtitle",
        "content": "Typy rekordów DNS"
      },
      "Na początku naszej ścieżki powiedziałem, że do pewnego momentu powinniśmy traktować DNS jako coś, co konwertuje adresy URL na adresy IP stron internetowych. Technicznie jest to prawda, ale tylko częściowo. DNS jest odpowiedzialny za konwersję <b>każdej czytelnej dla człowieka nazwy zasobu na adres IP</b>. Obejmuje nie tylko strony internetowe (IPv4 i IPv6), ale także na przykład serwery poczty e-mail. Są to tak zwane <b>typy rekordów DNS</b>. Omówmy krótko najważniejsze z nich.",
      {
        "type": "subsubtitle",
        "content": "A Rekord (address)"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Rekord A (adres)</b> — pokazuje adres IP dla określonej nazwy hosta lub domeny. Działa tylko dla typu IPv4. Głównym jego zastosowaniem jest wyszukiwanie adresu IP. Korzystając z rekordu a, przeglądarka internetowa może załadować stronę internetową przy użyciu nazwy domeny."
        ]
      },
      {
        "type": "subsubtitle",
        "content": "AAAA Rekord (quad A)"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Rekord AAAA (quad A)</b> — tak jak rekord wskazuje adres IP domeny, kup zamiast używać IPv4, używa IPv6. Główne użycie if jest takie samo jak w przypadku typu, ale rozwiązuje nazwę domeny na nowszy adres protokołu IPv6. Telefony komórkowe preferują IPv6, jeśli jest dostępny."
        ]
      },
      {
        "type": "subsubtitle",
        "content": "MX Rekord (Mail eXchange)"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Rekord MX (Wymiana poczty)</b> — umożliwia kierowanie wiadomości e-mail do serwera pocztowego, pokazując, gdzie wiadomości e-mail dla domeny powinny być kierowane. Możesz mieć wiele rekordów MX dla jednej nazwy domeny-w zasadzie wystarczy wykonać kopię zapasową poczty e-mail. Im niższa wartość priorytetu dla serwera,tym ważniejsza. A w przypadku awarii serwera podstawowego zostanie użyty serwer dodatkowy-aktywny-aktywny schemat."
        ]
      },
      "Głównym jego zastosowaniem jest mapowanie, gdzie należy dostarczyć wiadomość e-mail. Powinien wskazywać nazwę serwera pocztowego, a nie adres IP. <b>ANAME</b> — może wskazywać nazwę serwera pocztowego lub adres IP.",
      {
        "type": "subsubtitle",
        "content": "NS Rekord (nameserver)"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>NS Record (nameserver)</b> — określa autorytatywny serwer DNS dla domeny. Innymi słowy, rekord NS pomaga wskazać, gdzie aplikacja internetowa, taka jak przeglądarka internetowa, może znaleźć adres IP nazwy domeny. Zwykle dla domeny określa się wiele serwerów nazw. Głównym zastosowaniem tych autorytatywnych serwerów jest połączenie nazwy domeny z rzeczywistym serwerem, na którym hostowana jest Twoja witryna. Serwery nazw zawierają inne rekordy DNS, takie jak rekordy MX lub A."
        ]
      },
      {
        "type": "subsubtitle",
        "content": "CNAME Rekord (Canonical Name)"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Rekord CNAME (Nazwa kanoniczna)</b> — to rekord DNS, który wskazuje nazwę domeny (alias) na inną domenę. W rekordzie CNAME alias nie wskazuje adresu IP. A nazwa domeny, na którą wskazuje alias, to nazwa kanoniczna."
        ]
      },
      "Na przykład subdomena ng.example.com (ng.example.com jest rekordem CNAME) może wskazywać na example.com korzystanie z CNAME. Tutaj example.com wskazuje Rzeczywisty adres IP za pomocą rekordu A.",
      "Głównym jego zastosowaniem jest uruchamianie wielu subdomen do różnych celów na tym samym serwerze. Na przykład mamy ftp.example.com oraz www.example.com. możemy następnie użyć rekordu CNAME, aby wskazać obie subdomeny example.com. domena główna example.com następnie wskazuje adres IP serwera za pomocą rekordu A. Możliwe jest również, że jedna nazwa CNAME wskazuje inną nazwę. Jest to jednak nieefektywne i może prowadzić do niskiej prędkości ładowania i słabego doświadczenia użytkownika.",
      "Zwykle wskazuje na load balancer.",
      {
        "type": "subsubtitle",
        "content": "ANAME Rekord"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>ANAME (ALIAS)</b> — połączenie CNAME i typów rekordów A. Nazwa nie jest odczytywanym rekordem DNS, ale sposobem na jego symulację. I dlatego nazywa się to nazwą aliasu. Podobnie jak CNAME, ANAME odwzorowuje jedną nazwę domeny na drugą. Tak więc ANAME jest skonfigurowana do wskazywania innej domeny. Gdy nazwa domeny, na którą wskazuje ANAME, jest odpytywana przez przeglądarkę klienta, odpowiada adresem IP. Z drugiej strony CNAME nie może wskazywać adresu IP, ale ANAME może."
        ]
      },
      "Był używany w przeszłości, CNAME jest obecnie królem. Nie powinien wskazywać na load balancer.",
      {
        "type": "subsubtitle",
        "content": "TXT Rekord"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>Rekord TXT (rekord tekstowy)</B> — to typ rekordu, który umożliwia administratorowi dodawanie notatek czytelnych dla człowieka (i do odczytu maszynowego) w DNS. Nie wymaga określonego formatu. Służy do zapewnienia możliwości kojarzenia dowolnego tekstu z hostem lub inną nazwą, taką jak czytelne dla człowieka informacje o serwerze, sieci, centrum danych lub inne informacje księgowe."
        ]
      },
      "Głównym zastosowaniem tego w dzisiejszych czasach jest zapobieganie spamowi e-mailowemu i weryfikacja własności domeny. Tutaj powinniśmy porozmawiać o DMARC, SPF i DKIM, ale na razie po prostu wiedz, że chodzi o <b>bezpieczeństwo antyspamowe</B>.",
      {
        "type": "title",
        "content": "Problemy z bezpieczeństwem DNS"
      },
      "Okej, teraz mamy pełny przegląd tego, jak działa rozpoznawanie DNS, jakie są różne role serwerów DNS, a nawet wspomnieliśmy o kilku głównych typach rekordów, ale co z kwestiami bezpieczeństwa? W rzeczywistości mamy tylko 2 główne problemy z bezpieczeństwem - <b>brak uwierzytelnienia i poufności</b>.",
      "Pierwszy wynika z faktu, że DNS nie ma możliwości sprawdzenia, czy żądany rekord pochodzi z zaufanego źródła, a ten problem jest łagodzony przez <b>DNSSEC</b>.",
      "Drugi wynika z faktu, że DNS jako protokół został zaimplementowany na początku lat 80-tych. jak już wiesz, w tym czasie bezpieczeństwo nie było na pierwszym planie, podczas gdy wszystkie zasoby koncentrowały się na zapewnieniu tylko dostępności. Dlatego DNS, podobnie jak wiele innych protokołów, takich jak HTTP lub ART, przesyła dane w postaci zwykłego tekstu. Ten problem jest łagodzony przez <b>szyfrowanie </b>.",
      "Dobrze, zdecydowanie omówimy oba problemy, ale najpierw przyjrzyjmy się, jak wygląda DNS, gdy został zhakowany:",
      {
        "type": "list-numeric",
        "items": [
          "The client sends a recursive query to its local recursive caching DNS server for IP address of <b>\"cloudflare.com\"</b> webpage.",
          "The recursive caching DNS server sends an iterative query to a root (<b>\".\"</b>) nameserver for IP address of <b>\"cloudflare.com\"</b> webpage.",
          "The root nameserver responds with a referral to <b>\".com\"</b> zone's TLD nameserver.",
          "The recursive caching DNS server sends an iterative query to a <b>\".com\"</b> TLD nameserver for IP address of <b>\"cloudflare.com\"</b> webpage.",
          "The <b>\".com\"</b> TLD nameserver responds with a referral to <b>\"cloudflare\"</b> zone's authoritative nameserver.",
          "The recursive caching DNS server sends an iterative query to a <b>\"cloudflare\"</b> authoritative nameserver for IP address of <b>\"cloudflare.com\"</b> webpage.",
          "The evil DNS server responds with the evil IP address for <b>\"cloudflare.com\"</b>.",
          "The recursive caching DNS server responds to the original client with the evil IP address for <b>\"cloudflare.com\"</b>.",
          "Client interacts with the evil web server, which either respond directly, or perform <b>Man-in-the-Middle</b> attack operation by passing and observing (or altering) traffic from/to the legitimate web server."
        ]
      },
      {
        "type": "picture",
        "width": "w70",
        "resource": "dns_poisoning.jpeg"
      },
      "Jak widać, od kroku 1 do 6 mamy dokładnie ten sam przepływ, problemy zaczynają się od kroku 7.",
      "Nazywa się to <b>DNS spoofing/Cache poisoning</b> — jest to atak, w którym sfałszowane dane DNS są wprowadzane do pamięci podręcznej resolwera DNS, w wyniku czego resolver zwraca nieprawidłowy adres IP dla domeny. Zamiast przejść do właściwej strony internetowej, ruch może zostać przekierowany na złośliwą maszynę lub gdziekolwiek indziej, czego chce atakujący; często będzie to replika oryginalnej witryny używanej do złośliwych celów, takich jak dystrybucja złośliwego oprogramowania lub zbieranie danych logowania.",
      "Musimy więc jakoś sprawdzić, czy odpowiedź pochodzi z zaufanego źródła, prawda? Zasadniczo zapewnij  <B>uwierzytelnianie</B> — tutaj w grę wchodzi <b> DNSSEC</B>.",
      {
        "type": "title",
        "content": "Przegląd DNSSEC"
      },
      "Wreszcie, oto jesteśmy, DNSSEC! Powinniśmy wziąć pod uwagę, że DNS i DNSSEC są teraz jak HTTP i HTTPS ~20 lat temu. Będzie to wymagane przez wszystkich w celu zapewnienia bezpiecznej komunikacji. DNSSEC i HTTPS są nawet podobne w niektórych przypadkach.",
      "HTTPS zapewnia zarówno <b>uwierzytelnianie</b>, jak i <b>poufność</b> przy użyciu infrastruktury PKI CA (jeśli nie znasz <a href='https://blog.mikhailbahdashych.me/en/blog/pki-infrastructure-or-how-to-build-your-own-vpn' class='inline-link non-en'> zobacz tutaj</a>).<b>Uwierzytelnianie</b> zapewnia weryfikacja, kto był wystawcą certyfikatu, natomiast <b>poufność</b> zapewnia szyfrowanie ruchu.",
      "W przypadku DNSSEC zapewnia tylko <b>uwierzytelnianie</b>, gdzie szyfrowanie DNS zapewnia <b>poufność</b>, o czym już wspomniano powyżej. Ale wracając do DNSSEC, zacznijmy od prostej definicji tego, czym tak naprawdę jest:",
      {
        "type": "list-bullet",
        "items": [
          "<b>DNSSEC (DNS Security Extension)</b> — is an authentication mechanism that utilises PKI cryptography to prevent spoofing. With DNSSEC, it's not DNS queries and responses themselves are cryptographically signed, but rather DNS data itself signed by the owner of the data."
        ]
      },
      "Remember where we mentioned that DNS has hierarchical structure? The example of DNSSEC will make it even more obvious. Assuming that you are already familiar with PKI and cryptography, we need to introduce a couple of new terms especially for DNSSEC.",
      {
        "type": "subtitle",
        "content": "DNSSEC Terminology"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>RRSet - Resource Record Set</b> — the first step towards securing a zone with DNSSEC is to group all the records with the same type into a resource record set (RRset). For example, if you have three AAAA records in your zone on the same label (i.e. label.example.com), they would all be bundled into a single AAAA RRset.\n\nIt's actually this full RRset that gets digitally signed, opposed to individual DNS records. Of course, this also means that you must request and validate all of the AAAA records from a zone with the same label instead of validating only one of them. In short — <b>a set of records with the same type and same domain/zone</b>."
        ]
      },
      {
        "type": "picture",
        "width": "w80",
        "resource": "diagram-rrsets.svg"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>DNSKEY</b> — contains a public signing key.",
          "<b>RRSig - Resource Record Signature</b> — a record containing RRSet's digital signature.",
          "<b>ZSK - Zone Signing Key</b> — <b>used to sign or verify a domain's/zone's non-key records (A, AAAA, MX etc.)</b>. In DNSSEC, each zone has a pair of zone-signing keys (ZSK), where the private key signs each RRset in the zone while the public key verifies the signature. To implement DNSSEC, a zone operator uses the private ZSK to create digital signatures for each RRset and stores them as RRSig records in their nameserver.\n\nHowever, the RRSig records alone cannot be used by DNS resolvers to verify the signatures. To enable this, the zone operator adds their public ZSK to their nameserver in a DNSKEY record.\n\nWhen a DNSSEC resolver requests a record type, the nameserver returns the corresponding RRSig along with the RRset. The resolver can then retrieve the public ZSK from the DNSKEY record on the nameserver. The RRset, RRSig, and public ZSK together can validate the response.\n\nTrusting the zone-signing key in the DNSKEY record also means trusting all records in the zone. But if the ZSK is compromised, it is crucial to validate the public ZSK to ensure security."
        ]
      },
      {
        "type": "picture",
        "width": "w60",
        "resource": "diagram-zone-signing-keys-2.svg"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>KSK - Key Signing Key</b> — <b>used to sign or verify a domain's/zone's keys</b>. In addition to the zone-signing key, DNSSEC nameservers utilize a key-signing key (KSK). Similar to how the ZSK provided security for the RRsets in the previous section, the KSK validates the DNSKEY record by signing the public ZSK, thereby generating an RRSIG for the DNSKEY.\n\nThe public KSK is also published in a DNSKEY record by the nameserver, just like the public ZSK, which results in the DNSKEY RRSet. Both the public KSK and public ZSK are signed by the private KSK. This enables resolvers to use the public KSK to validate the public ZSK."
        ]
      },
      "Validation for resolvers now looks like this:",
      {
        "type": "list-numeric",
        "items": [
          "Request the desired <b>RRSet</b>, which also returns the corresponding <b>RRSIG</b> record.",
          "Request the DNSKEY records that contains <b>public ZSK and KSK</b> which also returns the <b>RRSig</b> for the <b>DNSKEY RRSet</b>.",
          "Verify the <b>RRSig</b> of the requested <b>RRSet</b> with the <b>public ZSK</b>.",
          "Verify the <b>RRSig</b> of the <b>DNSKEY RRSet</b> with the <b>public KSK</b>."
        ]
      },
      {
        "type": "picture",
        "width": "w60",
        "resource": "diagram-key-signing-keys-2.svg"
      },
      "You have probably already noticed the hierarchical nature of DNS, and this is just the beginning. Regarding KSK, the DNSKEY RRSet and corresponding RRSig records can be cached to avoid excessive requests to DNS name servers.",
      "The use of separate zone-signing keys and key-signing keys is aimed at facilitating the replacement of an old or compromised KSK, as we will discuss in the next section. Conversely, changing the ZSK is a simpler process, making it possible to use a smaller ZSK without compromising server security and reducing the amount of data that the server needs to transmit with each response.",
      "While we have established trust within our zone, DNS is a hierarchical system, and zones typically operate in conjunction with one another. The key-signing key is signed by itself, which doesn't add any extra trust, so we need a means of connecting the trust in our zone with its parent zone.",
      {
        "type": "list-bullet",
        "items": [
          "<b>DS Record - Delegation of Signing</b> — <b>a record containing the hash/digest of a child domain's/zone's public KSK (the fingerprint of child's public KSK)</b>. In DNSSEC, a delegation signer (DS) record is introduced to transfer trust from a parent zone to a child zone. To accomplish this, the zone operator hashes the public KSK contained in the DNSKEY record and provides it to the parent zone to publish as a DS record.\n\nWhenever a resolver is directed to a child zone, the parent zone also provides a DS record. This record enables resolvers to determine if the child zone is DNSSEC-enabled. To validate the public KSK of the zone, the resolver hashes it and compares it to the DS record from the parent zone. If the hash values match, the resolver can safely assume that the public KSK has not been compromised or altered, thereby establishing trust in all the records of the child zone. <b>This is how a chain of trust is established in DNSSEC.</b>"
        ]
      },
      {
        "type": "picture",
        "width": "w50",
        "resource": "diagram-delegation-signer-records.svg"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>The Chain of Trust</b> — the process of establishing trust within a zone and linking it to its parent zone, requires a mechanism for verifying the authenticity of the DS record. This is accomplished by digitally signing the DS record, similar to any other RRSet, resulting in the existence of a corresponding RRSig in the parent zone. The process of validating this signature is repeated successively, all the way up to the public KSK of the parent zone. To confirm the authenticity of this KSK, it is necessary to check the parent's DS record, continuing this process up the Chain of Trust."
        ]
      },
      {
        "type": "picture",
        "width": "w50",
        "resource": "diagram-the-chain-of-trust.svg"
      },
      {
        "type": "subtitle",
        "content": "DNSSEC Resolution Flow"
      },
      "Oh, that was tough, wasn't it? Okay, enough of this terminology, everything is better seen in examples. We are going to modify our previous DNS resolution flow to make it DNSSEC-enabled.",
      {
        "type": "list-numeric",
        "items": [
          "The client sends a recursive query to its local recursive caching DNS server for IP address of <b>\"cloudflare.com\"</b> webpage.",
          "The recursive caching DNS server sends an iterative query to a root (<b>\".\"</b>) nameserver for IP address of <b>\"cloudflare.com\"</b> webpage.",
          "The root nameserver:",
          [
            "Sends a referral:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "A non-secured referral for the authoritative TLD nameserver for the <b>\".com\"</b> zone"
              ]
            },
            "Sends a record:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "<b>RRSet of DNSKEY</b> records for the root zone - the root zone's <b>public ZSK and public KSK</b>.",
                "<b>RRSig</b> of above record set - signed using the root zone's <b>private KSK</b>.",
                "<b>DS record</b> for the <b>\".com\"</b> zone - the hash/digest/fingerprint of the \".com\" zone's public KSK.",
                "<b>RRSig</b> of above DS record - signed using the root zone's private ZSK."
              ]
            }
          ],
          "The recursive caching DNS server:",
          [
            "Verifies the record:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "<b>Root</b> zone's <b>DNSKEY RRSet</b> is verified by successfully decrypting the RRSet's RRSig using the root zone's public KSK.",
                "<b>Root</b> zone's DS record for <b>\".com\"</b> zone is verified by successfully decrypting the record's RRSig using the <b>root</b> zone's public ZSK."
              ]
            },
            "Verifies the zone:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "The recursive caching DNS server already has a trusted copy of the root public KSK which it obtained by means other than the DNS protocol (such as from the server's operating system's vendor). The root zone is verified by the recursive caching DNS server when the server's copy of the root public KSK is found to match that provided to the server by the root DNS server."
              ]
            }
          ],
          "The recursive caching DNS server sends an iterative query to a <b>\".com\"</b> TLD nameserver for <b>\"cloudflare.com\"</b>.",
          "The <b>\".com\"</b> TLD nameserver:",
          [
            "Sends a referral:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "A non-secured referral for <b>\"cloudflare\"</b> zone's authoritative nameserver."
              ]
            },
            "Sends the records:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "<b>RRSet of DNSKEY</b> records for the \".com\" zone - the \".com\" zone's <b>public ZSK and public KSK</b>.",
                "<b>RRSig</b> of above record set - signed using the \".com\" <b>private KSK</b>.",
                "<b>DS record</b> for the <b>\"cloudflare\"</b> zone - the hash/digest/fingerprint of the \"cloudflare\" zone's public KSK.",
                "<b>RRSig</b> of above DS record - signed using \".com\" zone's private ZSK."
              ]
            }
          ],
          "The recursive caching DNS server:",
          [
            "Verifies the records:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "<b>\".com\" DNSKEY RRSet</b> is verified by successfully decrypting the RRSet's RRSig using the \".com\" zone's public KSK",
                "<b>\".com\"</b> zone's DS record for <b>\"cloudflare\"</b> zone is verified by successfully decrypting the record's RRSig using the <b>\".com\"</b> zone's public ZSK."
              ]
            },
            "Verifies the zone:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "The <b>\".com\"</b> zone is verified by comparing the hash/digest/fingerprint of the <b>\".com\"</b> zone's public KSK from the <b>\".com\"</b> zone with the previously obtained DS record from the root zone for the <b>\".com\"</b> zone."
              ]
            }
          ],
          "The recursive caching DNS server sends an iterative query to a \"cloudflare\" authoritative nameserver for \"cloudflare.com\"",
          "The \"cloudflare\" authoritative nameserver server:",
          [
            "Sends the records:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "<b>RRSet of DNSKEY</b> records for the <b>\"cloudflare\"</b> zone - the <b>\"cloudflare\"</b> zone's public ZSK and public KSK.",
                "<b>RRSig</b> of above record set - signed using the <b>\"cloudflare\"</b> private KSK.",
                "<b>RRSet of A records</b> from the <b>\"cloudflare\"</b> zone.",
                "<b>RRSig</b> of above DS record - signed using <b>\"cloudflare\"</b> zone's private ZSK."
              ]
            }
          ],
          "The recursive caching DNS server:",
          [
            "Verifies the records:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "<b>\"cloudflare\" DNSKEY RRSet</b> is verified by successfully decrypting the RRSet's RRSig using the <b>\"cloudflare\"</b> zone's public KSK.",
                "<b>\"cloudflare\" A RRSet</b> is verified by successfully decrypting the RRSet's RRSig using the <b>\"cloudflare\"</b> zone's public ZSK."
              ]
            },
            "Verifies the zone:",
            {
              "style": "no-margin",
              "type": "list-bullet",
              "items": [
                "The <b>\"cloudflare\"</b> zone is verified by comparing the hash/digest/fingerprint of the <b>\"cloudflare\"</b> zone's public KSK from the <b>\"cloudflare\"</b> zone with the previously obtained DS record from the root zone for the <b>\"cloudflare\"</b> zone."
              ]
            }
          ],
          "The recursive caching DNS server responds to the original client with the IP address of <b>\"cloudflare.com\"</b>.",
          "The client interacts with the web server <b>\"cloudflare.com\"</b>."
        ]
      },
      "There is one thing you need to understand. All those examples that are presented here about how DNS works are academic examples. This only happens in sterile, \"laboratory\" conditions (in this case, if there were no cache anywhere). These concepts are easy enough to understand that they have a place to be, in reality, if you have to configure such a system, then it is literally a few lines of code or a configuration change.",
      "Such examples are more likely to be needed by people who design networks and infrastructures of this scale.",
      "Speaking of the DNS example itself, different configurations represent different functions. As mentioned above all those recursive resolvers, caching server or root nameservers are just roles, physically, it can be one machine. Therefore, configuration of your DNS server also depends on what you want to build. So, be careful with guidelines you find on the Internet.",
      {
        "type": "title",
        "content": "The DNSSEC Root Signing Ceremony"
      },
      "Oh, in fact, in order to understand how everything works, you do not need to know anything about this ceremony, but it looks so cool and sounds so pathetic that I could not help but write about it. <b>Keys to the Internet</b>, not bad, huh?",
      "You have probably already paid attention to how this DNS hierarchy goes from bottom to top. In this case, you might have a logical question: What is at the very top?",
      "That's the purpose of the Root Signing Ceremony—a rigorous procedure around signing the root DNS zone's public keying information for the next few months. The private signing key used in this process is quite literally the key to the entire DNSSEC-protected Internet. A public, audited, and tightly controlled ceremony around accessing this key is a necessity for DNSSEC to succeed as a global standard.",
      "Just find a video of this ceremony, because it's translated online and see where DNSSEC trust comes from.",
      {
        "type": "title",
        "content": "About DNS Encryption"
      },
      "As you have already found out, DNSSEC insures only authentication, but it still transfers it in plaintext. Here is where cryptography comes into play, our lovely HTTPS and TLS, which will help us to ensure not only authentication of our traffic, but also its confidentiality.",
      {
        "type": "subtitle",
        "content": "DNS over TLS"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>DNS over TLS (or DoT)</b>, is a standard for encrypting DNS queries to keep them secure and private. DoT uses the same protocol as HTTPS to encrypt and authenticate connection. Normally, DNS works over UDP. What DoT does, it it adds TLS encryption on top of the user datagram protocol (UDP), which is used for DNS queries. Additionally, it ensures that DNS requests and responses are not tampered with or forged via on-path attacks."
        ]
      },
      {
        "type": "subtitle",
        "content": "DNS over HTTPS"
      },
      {
        "type": "list-bullet",
        "items": [
          "<b>DNS over HTTPS (or DoH)</b> is an alternative way to DoT. DNS queries and responses are encrypted, but sent via the HTTP or HTTP/2 protocols instead of directly over UDP. DoH traffic looks like other HTTPS traffic - e.g. normal user-driven interactions with websites and web apps — from a network administrator's perspective."
        ]
      },
      "In February 2020, the Mozilla Firefox browser began enabling DoH for U.S. users by default. DNS queries from the Firefox browser are encrypted by DoH and go to either Cloudflare or NextDNS. Several other browsers also support DoH, although it is not turned on by default.",
      {
        "type": "subtitle",
        "content": "Difference between DoT and DoH"
      },
      "The main difference between them is <b>what port they use</b>. DoT only uses port 853, while DoH uses 443, which is the port that all other HTTPS traffic uses as well.",
      "Because DoT has a dedicated port, anyone with network visibility can see DoT traffic coming and going, even though the requests and responses themselves are encrypted. In contrast, with DoH, DNS queries and responses are camouflaged within other HTTPS traffic, since it all comes and goes from the same port.",
      "<b>From a network security standpoint, DoT is arguably better</b>. It gives network administrator the ability to monitor and block DNS queries, which is important for identifying and stopping malicious activity.",
      "<b>DoH queries, meanwhile, are hidden in regular HTTPS traffic</b>, meaning they cannot easily be blocked without blocking all other HTTPS traffic as well. However, from a privacy perspective, DoH is arguably preferable. With DoH, DNS queries are hidden within the larger flow of HTTPS traffic. This gives network administrators less visibility but provides users with more privacy.",
      {
        "type": "title",
        "content": "Conclusions"
      },
      "In conclusion, DNS (Domain Name System) is a fundamental component of the internet that is used to translate domain names into IP addresses. While DNS is critical for internet connectivity and online services, it is also vulnerable to a range of DNS-based attacks, including cache poisoning and DNS spoofing.",
      "To address these security concerns, DNSSEC (Domain Name System Security Extensions) has been developed as a security protocol that adds a layer of cryptographic security to the DNS system. By using digital signatures to verify the authenticity of DNS responses, DNSSEC can help to protect against a range of DNS-related attacks, ensuring the integrity and reliability of the DNS system.",
      "While the adoption of DNSSEC has been slow, it is becoming increasingly important as the threat of DNS-based attacks continues to grow. Organizations that rely on online services should consider implementing DNSSEC to protect their online presence, improve the security of their network, and reduce the risk of DNS-based attacks. As the internet continues to evolve, DNS and DNSSEC will remain essential components of the global network, ensuring the reliability and security of online services for years to come.",
      {
        "type": "title",
        "content": "Contact and references"
      }
    ],
    "references": [{
      "name": "Co to jest DNS od Cloudflare",
      "link": "https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/"
    }, {
      "name": "Co to jest DNSSEC od Cloudflare (oczywiste, prawda?)",
      "link": "https://www.cloudflare.com/en-gb/dns/dnssec/how-dnssec-works/"
    }, {
      "name": "DNS over TLS vs DNS over HTTPS",
      "link": "https://www.cloudflare.com/en-gb/learning/dns/dns-over-tls/"
    }, {
      "name": "Zatruwanie i fałszowanie pamięci podręcznej DNS",
      "link": "https://www.cloudflare.com/en-gb/learning/dns/dns-cache-poisoning/"
    }, {
      "name": "Ludzie, którzy trzymają klucze do Internetu",
      "link": "https://www.cloudflare.com/en-gb/dns/dnssec/root-signing-ceremony/"
    }, {
      "name": "Dobrze napisany artykuł ICANN o tym, czym jest DNSSEC i dlaczego jest ważny",
      "link": "https://www.icann.org/resources/pages/dnssec-what-is-it-why-important-2019-03-05-en"
    }, {
      "name": "Naprawdę fajne wideo, które wyjaśnia przepływ rozpoznawania nazw DNS i DNSSEC",
      "link": "https://www.youtube.com/watch?v=_8M_vuFcdZU"
    }]
  }
}
