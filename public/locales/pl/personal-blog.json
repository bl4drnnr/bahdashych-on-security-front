{
  "title": "Blog osobisty",
  "brief": "Jak jest skonstruowane to, co teraz czytasz",
  "description": "Aplikacja internetowa React + Next.js TypeScript do osobistego bloga i strony z portfolio. Miejsce, w którym dzielę się swoimi przemyśleniami i wiedzą.",
  "searchTags": ["blog", "typescript", "nextjs"],
  "briefDescription": "Być może zastanawiacie się, jak powstał ten blog od strony programistycznej, dlatego chciałem dać Wam krótki przegląd narzędzi i technologii, z których korzystałem.",
  "license": "MIT licencja",
  "techStack": [
    { "src": "javascript", "width": 126, "height": 28 },
    { "src": "typescript", "width": 126, "height": 28 },
    { "src": "react", "width": 85, "height": 28 },
    { "src": "next.js", "width": 85, "height": 28 },
    { "src": "digitalOcean", "width": 130, "height": 28 },
    { "src": "amazon-aws", "width": 74, "height": 28 },
    { "src": "nginx", "width": 88, "height": 28 }
  ],
  "projectPages": [
    {
      "link": "https://blog.mikhailbahdashych.me",
      "text": "blog.mikhailbahdashych.me"
    },
    {
      "link": "https://github.com/bl4drnnr/personal-blog",
      "text": "github.com/bl4drnnr/personal-blog"
    }
  ],
  "toc": {
    "Struktura i implementacja": {
      "multiLang": "Wielojęzykowość",
      "lightDarkThemes": "Jasne/Ciemne motywy",
      "pageRendering": "Renderowanie strony"
    },
    "secIssues": "Problemy z bezpieczeństwem"
  },
  "content": [
    {
      "type": "title",
      "content": "Struktura i implementacja"
    },
    "Myślę, że pierwszą rzeczą, którą musisz wiedzieć o blogu, jest to, że jest to najprostsza aplikacja statyczna. Mimo że nie ma żadnego API ani back-endu, z którego pobierane byłyby posty, nie zobaczysz strony struktury dla posta. W rzeczywistości strony są renderowane, ale z formatu JSON, co zostanie opisane później.",
    {
      "type": "subtitle",
      "content": "Wielojęzykowość"
    },
    "Przede wszystkim blog został napisany w 3 językach (nie programistycznych, lol) - polskim, angielskim i rosyjskim. Zostało to zaimplementowane przy użyciu biblioteki <span class='code-block'>i18n</span> (całkiem oczywiste, prawda).",
    "W katalogu głównym projektu znajdziesz prosty plik konfiguracyjny o nazwie <span class='code-block'>next-i18next.config.js</span> zawierający dostępne języki oraz języki domyślne:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "module.exports = {\n\ti18n: {\n\t\tdefaultLocale: 'en',\n\t\tlocales: ['en', 'pl', 'ru'],\n  },\n \treact: { useSuspense: false }\n};"
    },
    "W folderze <span class='code-block'>lib</span> znajdziesz kilka funkcji odpowiedzialnych za cały proces tłumaczenia. Zostaną one omówione teraz, ale jest jeszcze jedna rzecz, o której należy wspomnieć.",
    "W folderze <span class='code-block'>locales</span> znajdziesz kilka innych folderów. Patrząc na ich nazwiska, można całkiem zrozumieć, za co są odpowiedzialni. Każdy folder ma te same nazwane pliki JSON (nawet taką samą strukturę), które zawierają cały tekst, który widzisz na blogu, przetłumaczony na 3 języki. Więc teraz wiesz, gdzie wszystko jest przechowywane, i możemy wrócić do folderu lib.",
    "Pierwszy to <span class='code-block'>language detector</span> zawiera to (<span class='code-block'>i18conifg</span> to alias dla <span class='code-block '>next-i18next.config.js</span>):",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import languageDetector from 'next-language-detector';\n\nimport i18nextConfig from '@i18config';\n\nexport default languageDetector({\n\tsupportedLngs: i18nextConfig.i18n.locales,\n\tfallbackLng: i18nextConfig.i18n.defaultLocale\n});"
    },
    "Powyższy kod jest tylko pomocnikiem dla <span class='code-block'>strony przekierowania</span>. To tylko pusta strona, która służy do sprawdzenia bieżącego języka:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { useRouter } from 'next/router';\n\nimport languageDetector from './languageDetector';\n\nconst useRedirect = (to: any) => {\n\tconst router = useRouter();\n\tto = to || router.asPath;\n\n\tReact.useEffect(() => {\n\t\tconst detectedLng = languageDetector.detect();\n\t\tif (to.startsWith('/' + detectedLng) && router.route === '/404') {\n\t\t\trouter.replace('/' + detectedLng + router.route);\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tlanguageDetector.cache(detectedLng);\n\t\trouter.replace('/' + detectedLng + to);\n\t});\n\n\treturn <></>;\n};\n\nexport const Redirect = () => {\n\t// @ts-ignore\n\tuseRedirect();\n\treturn <></>;\n};"
    },
    "Zapewne zauważyłeś, że trasa bloga zawsze wygląda tak: <span class='code-block'>blog.mikhailbahdashych.com/en</span>. Zawsze zaczyna się od wybranego języka. Zrozumiesz, dlaczego tak się dzieje, wystarczy spojrzeć na folder <span class='code-block'>pages</span>.",
    {
      "type": "picture",
      "width": "w30",
      "resource": "readme2.png"
    },
    "Treść każdej strony poza routem <span class='code-block'>[locale]</span> została zastąpiona przez:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { Redirect } from '@lib/redirect';\n\nexport default Redirect;"
    },
    "Dlatego za każdym razem, gdy próbujesz jechać na niewłaściwą trasę, jesteś albo przekierowywany na 404, albo na główną trasę. Ponadto w pliku <span class='code-block'>_app.tsx</span> w celu włączenia aplikacji <span class='code-block'>i18n</span> eksportowany jest kod <span class='code-block'>appWithTranslation</span>:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "export default appWithTranslation(App);"
    },
    "Ostatnim, ale nie mniej ważnym elementem jest plik <span class='code-block'>getStatic</span>, który odpowiada za właściwości stron i pobieranie ustawień regionalnych.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { serverSideTranslations } from 'next-i18next/serverSideTranslations';\n\nimport i18nextConfig from '@i18config';\n\nexport const getI18nPaths = () =>\n\ti18nextConfig.i18n.locales.map((lang) => ({\n\t\tparams: {\n\t\t\tlocale: lang\n\t\t}\n\t}));\n\nexport const getStaticPaths = () => ({\n\tfallback: false,\n\tpaths: getI18nPaths()\n});\n\nexport async function getI18nProps(ctx: any, ns = ['pages', 'components', 'errors', 'articles']) {\n\tconst locale = await ctx?.params?.locale;\n\tconst postName = await ctx?.params?.postName || null;\n\tconst projectName = await ctx?.params?.projectName || null;\n\n\treturn {\n\t\t...(await serverSideTranslations(locale, ns)),\n\t\tlocale,\n\t\tpostName,\n\t\tprojectName\n\t};\n}\n\n\nexport function makeStaticProps(ns: string[]) {\n\treturn async function getStaticProps(ctx: any) {\n\t\treturn {\n\t\t\tprops: await getI18nProps(ctx, ns)\n\t\t};\n\t};\n}"
    },
    "Widać, że zwraca <span class='code-block'>locale</span> i opcjonalnie <span class='code-block'>postName</span> lub <span class='code-block'>nazwa projektu</span>. Pozwala nam pobrać <span class='code-block'>locale</span> w rekwizytach i użyć go na przykład w funkcji przekierowania.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { useTranslation } from 'next-i18next';\nimport { getStaticPaths, makeStaticProps } from '@lib/getStatic';\n\ninterface ErrorPageProps {\n\tlocale: string;\n}\n\nconst ErrorPage = ({ locale }: ErrorPageProps) => {\n\tconst { t } = useTranslation();\n\treturn (\n\t\t<>...</>\n\t);\n};\n\nconst getStaticProps = makeStaticProps();\nexport { getStaticPaths, getStaticProps };\n\nexport default ErrorPage;"
    },
    "Elementy w tablicy dla funkcji <span class='code-block'>makeStaticProps</span> mają dokładnie takie same nazwy jak pliki JSON w folderze ustawień regionalnych.",
    {
      "type": "subtitle",
      "content": "Jasne/Ciemne motywy"
    },
    "Tutaj wszystko jest dość łatwe. Wystarczy <span class='code-block'>Recoil</span>, aby kontrolować stan i localStorage, aby przechowywać wartość schematu kolorów.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "// src/store/global/global.state.ts\n\nimport { atom } from 'recoil';\n\nexport const theme = atom<'dark' | 'light'>({\n\tkey: 'theme',\n\tdefault: 'dark',\n});"
    },
    "Specjalny haczyk do zmiany motywu:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import { useMemo } from 'react';\n\nimport { useRecoilState } from 'recoil';\n\nimport { theme as storeTheme } from '@store/global/global.state';\nimport { DarkTheme } from '@styles/Dark.theme';\nimport { LightTheme } from '@styles/Light.theme';\n\nconst useDarkMode = () => {\n\tconst [theme, setTheme] = useRecoilState(storeTheme);\n\n\tconst toggleTheme = () => {\n\t\tsetTheme(theme === 'light' ? 'dark' : 'light');\n\t};\n\n\tconst themeMode = useMemo(() => (theme === 'light' ? LightTheme : DarkTheme), [theme]);\n\n\treturn [theme, toggleTheme, themeMode] as const;\n};\n\nexport default useDarkMode;"
    },
    "Używany w <span class='code-block'>Global.layout.tsx</span> przez <span class='code-block'>ThemeProvider<span class='code-block'>:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nimport useDarkMode from '@hooks/useDarkMode.hook';\nimport { DarkTheme } from '@styles/Dark.theme';\nimport { LightTheme } from '@styles/Light.theme';\n\nconst GlobalLayout = ({ children, loading = false }: GlobalLayoutProps) => {\n\tconst [theme] = useDarkMode();\n\n\treturn (\n\t\t<ThemeProvider theme={theme === 'light' ? LightTheme : DarkTheme}>\n\t\t\t...\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default GlobalLayout;"
    },
    "Moduł obsługi zmiany motywu został zaimplementowany w komponencie <span class='code-block'>Header</span>.",
    "Dwa motywy opisane w folderze <span class='code-block'>themes</span>. Implementują interfejs, który opisuje, jakie pola mogą być używane:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "export interface ThemeProps {\n\tcolors: {\n\t\tprimaryLight: string;\n\t\tprimaryDark: string;\n\t\tlightBackground: string;\n\t\tdarkBackground: string;\n\t\ttextColor: string;\n\t\tsvgColor: string;\n\t}\n}"
    },
    {
      "type": "subtitle",
      "content": "Renderowanie strony"
    },
    "Jak widać, zamiast tworzenia strony na post/projekt, utworzono tylko jedną stronę na encję. Każda strona pobiera nazwę projektu lub posta z params, a następnie sprawdza (w zmiennych środowiskowych) sprawdza, czy strona istnieje, renderuje ją z JSON, w innym przypadku przekierowuje użytkownika do 404. Oznacza to również, że każdy JSON musi być zapisane w określonym formacie.",
    "Oto jak to wygląda:",
    {
      "type": "code",
      "lang": "typescript",
      "content": "import React from 'react';\n\nimport { useTranslation } from 'next-i18next';\nimport { useRouter } from 'next/router';\n\nimport { makeStaticProps } from '@lib/getStatic';\n\ninterface PostProps {\n\tlocale: string;\n\tpostName: string;\n}\n\nconst BlogPost = ({ locale, postName }: PostProps) => {\n\tconst { t } = useTranslation();\n\tconst router = useRouter();\n  \n\treturn (\n\t\t<>\n\t\t\t...\n\t\t\t<PostParagraph\n\t\t\t\tdangerouslySetInnerHTML={{ __html: item }}\n\t\t\t/>\n\t\t\t...\n\t\t</>\n\t);\n};\n\nexport const getServerSideProps = async (ctx: any) => {\n\tconst staticProps = await makeStaticProps()(ctx);\n\tconst props = staticProps.props;\n\n\treturn {\n\t\tprops: {\n\t\t\t...props\n\t\t}\n\t};\n};\n\nexport default BlogPost;"
    },
    "Jak wspomniano powyżej, użycie rekwizytów dla strony postu i projektu różni się nieco od innych stron, ponieważ w tym przypadku musimy również uzyskać nie tylko <span class='code-block'>locale</span>, ale < span class='code-block'>postName</span> (lub <span class='code-block'>projectName</span>)",
    "Czy zauważyłeś <span class='code-block'>dangerouslySetInnerHTML</span>, cóż, jest jeden problem z bezpieczeństwem...",
    {
      "type": "title",
      "content": "Problemy z bezpieczeństwem"
    },
    "Bruh, problemy z bezpieczeństwem?! Tak, prawdopodobnie zauważyłeś, że każdy post na blogu jest napisany w formacie JSON, po prostu określając wszystkie pola i strukturę samego posta, takie jak tytuły, podtytuły, bloki kodu itp. Cóż, tutaj w grę wchodzi atak wstrzykiwania XSS. Ponieważ chciałem umieścić tekst bezpośrednio w akapicie, na przykład <span class='code-block'>w ten sposób</span>, musiałem zdecydować, jak chcę to zrobić.",
    "Miałem na to kilka pomysłów, jedynym wymogiem było to, aby każdy post mieścił się w strukturze \"jednej strony\". Zasadniczo, jeśli spojrzysz na strukturę plików, jak wspomniano wcześniej, przekonasz się, że jest tylko jedna strona, która pobiera nazwę posta z adresu URL, a następnie sprawdza (używając zmiennych środowiskowych), czy strona istnieje,\"renderuje\" go z JSON, w przeciwnym razie przekierowuje na stronę 404.",
    {
      "type": "picture",
      "width": "w50",
      "resource": "readme1.png"
    },
    "W tym momencie myślę, że niektórzy z was już zorientowali się, na czym polega problem. Jeśli muszę renderować HTML zapisany jako tekst, muszę użyć <span class='code-block'>dangerouslySetInnerHTML</span> i to jest prosta droga do XSS, jeśli tekst pochodzi z niezaufanych źródeł i/lub nie zdezynfekowane.",
    {
      "type": "code",
      "lang": "typescript",
      "content": "<PostParagraph \n\tdangerouslySetInnerHTML={{ __html: item }}\n/>"
    },
    {
      "type": "code",
      "lang": "typescript",
      "content": "[\n\t\"Very last step here is checking if our nginx sever is working correctly\"\n]"
    },
    "Powyżej widzieliście przykład, jak renderuję prosty akapit. Możesz łatwo wstrzyknąć tam tag <span class='code-block'>script</span> i robić swoje brudne rzeczy. Na szczęście jest tylko jedno źródło i to zaufane, czyli ja :)",
    "Jak wspomniałem wcześniej, miałem kilka pomysłów, jak to wdrożyć. Sposób, w jaki został zaimplementowany, jest w rzeczywistości najłatwiejszy. Inną dość łatwą metodą jest prosta dezynfekcja. Jedyną rzeczą, która zostałaby wykluczona w tym przypadku, jest tag <span class='code-block'>script</span>. Dokładnie ta sama sytuacja ze stroną projektów.",
    "Najbardziej ukończone jest utworzenie \"własnych tagów\", a po tym, jak strony otrzymają JSON, zamiast renderować go dokładnie w tym momencie, przekazałbyś go do funkcji, która zinterpretowałaby twoje tagi do normalnego HTML i zwróciła je na stronę. Byłby to również rodzaj sanityzacji, ponieważ można go zaimplementować bezpośrednio w tej funkcji. Dlaczego postąpiłem w ten sposób? Cóż... Wiesz... Jestem trochę leniwy :)"

  ]
}
